
Binary_Adder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b1c  08002b1c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b24  08002b24  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000014  08002b40  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002b40  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006478  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001234  00000000  00000000  000264bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000610  00000000  00000000  000276f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000578  00000000  00000000  00027d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014da9  00000000  00000000  00028278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000526f  00000000  00000000  0003d021  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083359  00000000  00000000  00042290  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c55e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001878  00000000  00000000  000c5664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002a44 	.word	0x08002a44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08002a44 	.word	0x08002a44

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fe77 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f8a5 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f937 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f90b 	bl	8000714 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Enables green onboard led
	  HAL_GPIO_WritePin(modeLed_GPIO_Port, modeLed_Pin, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2120      	movs	r1, #32
 8000502:	484b      	ldr	r0, [pc, #300]	; (8000630 <main+0x148>)
 8000504:	f001 f9ac 	bl	8001860 <HAL_GPIO_WritePin>

	  readSwitchPins();
 8000508:	f000 f9ea 	bl	80008e0 <readSwitchPins>
	  readSwitchPins();
 800050c:	f000 f9e8 	bl	80008e0 <readSwitchPins>

	  int firstNumber = (dataArray[0]*32) + (dataArray[1]*16) + (dataArray[2]*8) + (dataArray[3]*4) + (dataArray[4]*2) + (dataArray[5]*1);
 8000510:	4b48      	ldr	r3, [pc, #288]	; (8000634 <main+0x14c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	005a      	lsls	r2, r3, #1
 8000516:	4b47      	ldr	r3, [pc, #284]	; (8000634 <main+0x14c>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4413      	add	r3, r2
 800051c:	005a      	lsls	r2, r3, #1
 800051e:	4b45      	ldr	r3, [pc, #276]	; (8000634 <main+0x14c>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	4413      	add	r3, r2
 8000524:	005a      	lsls	r2, r3, #1
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <main+0x14c>)
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	4413      	add	r3, r2
 800052c:	005a      	lsls	r2, r3, #1
 800052e:	4b41      	ldr	r3, [pc, #260]	; (8000634 <main+0x14c>)
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	4413      	add	r3, r2
 8000534:	005a      	lsls	r2, r3, #1
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <main+0x14c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4413      	add	r3, r2
 800053c:	60bb      	str	r3, [r7, #8]
	  int secondNumber = (dataArray[6]*32) + (dataArray[7]*16) + (dataArray[8]*8) + (dataArray[9]*4) + (dataArray[10]*2) + (dataArray[11]*1);
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <main+0x14c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	005a      	lsls	r2, r3, #1
 8000544:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <main+0x14c>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	4413      	add	r3, r2
 800054a:	005a      	lsls	r2, r3, #1
 800054c:	4b39      	ldr	r3, [pc, #228]	; (8000634 <main+0x14c>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4413      	add	r3, r2
 8000552:	005a      	lsls	r2, r3, #1
 8000554:	4b37      	ldr	r3, [pc, #220]	; (8000634 <main+0x14c>)
 8000556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000558:	4413      	add	r3, r2
 800055a:	005a      	lsls	r2, r3, #1
 800055c:	4b35      	ldr	r3, [pc, #212]	; (8000634 <main+0x14c>)
 800055e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000560:	4413      	add	r3, r2
 8000562:	005a      	lsls	r2, r3, #1
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <main+0x14c>)
 8000566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000568:	4413      	add	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
	  int total = firstNumber + secondNumber;
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	603b      	str	r3, [r7, #0]

	  processData(total);
 8000574:	6838      	ldr	r0, [r7, #0]
 8000576:	f000 fa4f 	bl	8000a18 <processData>

	  disableAllLeds();
 800057a:	f000 fcf5 	bl	8000f68 <disableAllLeds>
	  HAL_Delay(400);
 800057e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000582:	f000 fe9f 	bl	80012c4 <HAL_Delay>

	  // Some cool LED animation :)
	  for (int i=0; i < 4; i++) {
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	e045      	b.n	8000618 <main+0x130>
		  switch (i) {
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b03      	cmp	r3, #3
 8000590:	d83f      	bhi.n	8000612 <main+0x12a>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <main+0xb0>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	080005bd 	.word	0x080005bd
 80005a0:	080005db 	.word	0x080005db
 80005a4:	080005f7 	.word	0x080005f7
		  case 0:
			  HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ae:	4820      	ldr	r0, [pc, #128]	; (8000630 <main+0x148>)
 80005b0:	f001 f956 	bl	8001860 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 80005b4:	20c8      	movs	r0, #200	; 0xc8
 80005b6:	f000 fe85 	bl	80012c4 <HAL_Delay>
			  break;
 80005ba:	e02a      	b.n	8000612 <main+0x12a>
		  case 1:
			  HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c2:	481b      	ldr	r0, [pc, #108]	; (8000630 <main+0x148>)
 80005c4:	f001 f94c 	bl	8001860 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	481a      	ldr	r0, [pc, #104]	; (8000638 <main+0x150>)
 80005ce:	f001 f947 	bl	8001860 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 80005d2:	20c8      	movs	r0, #200	; 0xc8
 80005d4:	f000 fe76 	bl	80012c4 <HAL_Delay>
			  break;
 80005d8:	e01b      	b.n	8000612 <main+0x12a>
		  case 2:
			  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	4816      	ldr	r0, [pc, #88]	; (8000638 <main+0x150>)
 80005e0:	f001 f93e 	bl	8001860 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <main+0x154>)
 80005ea:	f001 f939 	bl	8001860 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f000 fe68 	bl	80012c4 <HAL_Delay>
			  break;
 80005f4:	e00d      	b.n	8000612 <main+0x12a>
		  case 3:
			  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	4810      	ldr	r0, [pc, #64]	; (800063c <main+0x154>)
 80005fc:	f001 f930 	bl	8001860 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <main+0x148>)
 8000606:	f001 f92b 	bl	8001860 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 800060a:	20c8      	movs	r0, #200	; 0xc8
 800060c:	f000 fe5a 	bl	80012c4 <HAL_Delay>
			  break;
 8000610:	bf00      	nop
	  for (int i=0; i < 4; i++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b03      	cmp	r3, #3
 800061c:	ddb6      	ble.n	800058c <main+0xa4>
		  }
	  }

	  enableAllLeds();
 800061e:	f000 fc83 	bl	8000f28 <enableAllLeds>
	  HAL_Delay(400);
 8000622:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000626:	f000 fe4d 	bl	80012c4 <HAL_Delay>
	  disableAllLeds();
 800062a:	f000 fc9d 	bl	8000f68 <disableAllLeds>
  {
 800062e:	e766      	b.n	80004fe <main+0x16>
 8000630:	40020000 	.word	0x40020000
 8000634:	20000030 	.word	0x20000030
 8000638:	40020800 	.word	0x40020800
 800063c:	40020400 	.word	0x40020400

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f9a2 	bl	8002998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <SystemClock_Config+0xd0>)
 800068e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b4:	2310      	movs	r3, #16
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006b8:	23c0      	movs	r3, #192	; 0xc0
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f921 	bl	8001910 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d4:	f000 fc68 	bl	8000fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fb7c 	bl	8001df0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 fc53 	bl	8000fa8 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f001 fd1c 	bl	8002188 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 fc27 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000060 	.word	0x20000060
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b52      	ldr	r3, [pc, #328]	; (80008cc <MX_GPIO_Init+0x164>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a51      	ldr	r2, [pc, #324]	; (80008cc <MX_GPIO_Init+0x164>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <MX_GPIO_Init+0x164>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <MX_GPIO_Init+0x164>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a4a      	ldr	r2, [pc, #296]	; (80008cc <MX_GPIO_Init+0x164>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b48      	ldr	r3, [pc, #288]	; (80008cc <MX_GPIO_Init+0x164>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b44      	ldr	r3, [pc, #272]	; (80008cc <MX_GPIO_Init+0x164>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a43      	ldr	r2, [pc, #268]	; (80008cc <MX_GPIO_Init+0x164>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <MX_GPIO_Init+0x164>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <MX_GPIO_Init+0x164>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <MX_GPIO_Init+0x164>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <MX_GPIO_Init+0x164>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, modeLed_Pin|led1_Pin|led8_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80007f4:	4836      	ldr	r0, [pc, #216]	; (80008d0 <MX_GPIO_Init+0x168>)
 80007f6:	f001 f833 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	4835      	ldr	r0, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x16c>)
 8000800:	f001 f82e 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	4833      	ldr	r0, [pc, #204]	; (80008d8 <MX_GPIO_Init+0x170>)
 800080a:	f001 f829 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : modeBtn_Pin */
  GPIO_InitStruct.Pin = modeBtn_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_GPIO_Init+0x174>)
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(modeBtn_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	482c      	ldr	r0, [pc, #176]	; (80008d4 <MX_GPIO_Init+0x16c>)
 8000824:	f000 fe82 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : modeLed_Pin led1_Pin led8_Pin */
  GPIO_InitStruct.Pin = modeLed_Pin|led1_Pin|led8_Pin;
 8000828:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4823      	ldr	r0, [pc, #140]	; (80008d0 <MX_GPIO_Init+0x168>)
 8000842:	f000 fe73 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : n0d1_Pin n1d1_Pin n0d2_Pin n1d0_Pin */
  GPIO_InitStruct.Pin = n0d1_Pin|n1d1_Pin|n0d2_Pin|n1d0_Pin;
 8000846:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	481f      	ldr	r0, [pc, #124]	; (80008d8 <MX_GPIO_Init+0x170>)
 800085c:	f000 fe66 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : led4_Pin */
  GPIO_InitStruct.Pin = led4_Pin;
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led4_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4817      	ldr	r0, [pc, #92]	; (80008d4 <MX_GPIO_Init+0x16c>)
 8000878:	f000 fe58 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : n0d0_Pin n1d2_Pin */
  GPIO_InitStruct.Pin = n0d0_Pin|n1d2_Pin;
 800087c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0x168>)
 8000892:	f000 fe4b 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_GPIO_Init+0x170>)
 80008ae:	f000 fe3d 	bl	800152c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2028      	movs	r0, #40	; 0x28
 80008b8:	f000 fe01 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008bc:	2028      	movs	r0, #40	; 0x28
 80008be:	f000 fe1a 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020400 	.word	0x40020400
 80008dc:	10110000 	.word	0x10110000

080008e0 <readSwitchPins>:

/* USER CODE BEGIN 4 */

void readSwitchPins(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	extern int dataArray[];
	extern int readSwitchPinsFuncExecCounter;

	// Do while blue button is not pressed
	if (readSwitchPinsFuncExecCounter == 1) {
 80008e4:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <readSwitchPins+0x124>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d13b      	bne.n	8000964 <readSwitchPins+0x84>
		while (run == 1) {
 80008ec:	e032      	b.n	8000954 <readSwitchPins+0x74>
			// Reads all input pins for first number
			dataArray[0] = HAL_GPIO_ReadPin(n1d2_GPIO_Port, n1d2_Pin);
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	4845      	ldr	r0, [pc, #276]	; (8000a08 <readSwitchPins+0x128>)
 80008f4:	f000 ff9c 	bl	8001830 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <readSwitchPins+0x12c>)
 80008fe:	601a      	str	r2, [r3, #0]
			dataArray[1] = HAL_GPIO_ReadPin(n1d1_GPIO_Port, n1d1_Pin);
 8000900:	2108      	movs	r1, #8
 8000902:	4843      	ldr	r0, [pc, #268]	; (8000a10 <readSwitchPins+0x130>)
 8000904:	f000 ff94 	bl	8001830 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b3f      	ldr	r3, [pc, #252]	; (8000a0c <readSwitchPins+0x12c>)
 800090e:	605a      	str	r2, [r3, #4]
			dataArray[2] = HAL_GPIO_ReadPin(n1d0_GPIO_Port, n1d0_Pin);
 8000910:	2120      	movs	r1, #32
 8000912:	483f      	ldr	r0, [pc, #252]	; (8000a10 <readSwitchPins+0x130>)
 8000914:	f000 ff8c 	bl	8001830 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <readSwitchPins+0x12c>)
 800091e:	609a      	str	r2, [r3, #8]
			dataArray[3] = HAL_GPIO_ReadPin(n0d2_GPIO_Port, n0d2_Pin);
 8000920:	2110      	movs	r1, #16
 8000922:	483b      	ldr	r0, [pc, #236]	; (8000a10 <readSwitchPins+0x130>)
 8000924:	f000 ff84 	bl	8001830 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <readSwitchPins+0x12c>)
 800092e:	60da      	str	r2, [r3, #12]
			dataArray[4] = HAL_GPIO_ReadPin(n0d1_GPIO_Port, n0d1_Pin);
 8000930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000934:	4836      	ldr	r0, [pc, #216]	; (8000a10 <readSwitchPins+0x130>)
 8000936:	f000 ff7b 	bl	8001830 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <readSwitchPins+0x12c>)
 8000940:	611a      	str	r2, [r3, #16]
			dataArray[5] = HAL_GPIO_ReadPin(n0d0_GPIO_Port, n0d0_Pin);
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	4830      	ldr	r0, [pc, #192]	; (8000a08 <readSwitchPins+0x128>)
 8000948:	f000 ff72 	bl	8001830 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <readSwitchPins+0x12c>)
 8000952:	615a      	str	r2, [r3, #20]
		while (run == 1) {
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <readSwitchPins+0x134>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d0c8      	beq.n	80008ee <readSwitchPins+0xe>
		}
		readSwitchPinsFuncExecCounter = 2;
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <readSwitchPins+0x124>)
 800095e:	2202      	movs	r2, #2
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	e04a      	b.n	80009fa <readSwitchPins+0x11a>
	}
	else if (readSwitchPinsFuncExecCounter == 2) {
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <readSwitchPins+0x124>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d146      	bne.n	80009fa <readSwitchPins+0x11a>
		while (run == 1) {
 800096c:	e039      	b.n	80009e2 <readSwitchPins+0x102>
			// Reads all input pins for second number
			dataArray[6] = HAL_GPIO_ReadPin(n1d2_GPIO_Port, n1d2_Pin);
 800096e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <readSwitchPins+0x128>)
 8000974:	f000 ff5c 	bl	8001830 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <readSwitchPins+0x12c>)
 800097e:	619a      	str	r2, [r3, #24]
			dataArray[7] = HAL_GPIO_ReadPin(n1d1_GPIO_Port, n1d1_Pin);
 8000980:	2108      	movs	r1, #8
 8000982:	4823      	ldr	r0, [pc, #140]	; (8000a10 <readSwitchPins+0x130>)
 8000984:	f000 ff54 	bl	8001830 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <readSwitchPins+0x12c>)
 800098e:	61da      	str	r2, [r3, #28]
			dataArray[8] = HAL_GPIO_ReadPin(n1d0_GPIO_Port, n1d0_Pin);
 8000990:	2120      	movs	r1, #32
 8000992:	481f      	ldr	r0, [pc, #124]	; (8000a10 <readSwitchPins+0x130>)
 8000994:	f000 ff4c 	bl	8001830 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <readSwitchPins+0x12c>)
 800099e:	621a      	str	r2, [r3, #32]
			dataArray[9] = HAL_GPIO_ReadPin(n0d2_GPIO_Port, n0d2_Pin);
 80009a0:	2110      	movs	r1, #16
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <readSwitchPins+0x130>)
 80009a4:	f000 ff44 	bl	8001830 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <readSwitchPins+0x12c>)
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
			dataArray[10] = HAL_GPIO_ReadPin(n0d1_GPIO_Port, n0d1_Pin);
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <readSwitchPins+0x130>)
 80009b6:	f000 ff3b 	bl	8001830 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <readSwitchPins+0x12c>)
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
			dataArray[11] = HAL_GPIO_ReadPin(n0d0_GPIO_Port, n0d0_Pin);
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	4810      	ldr	r0, [pc, #64]	; (8000a08 <readSwitchPins+0x128>)
 80009c8:	f000 ff32 	bl	8001830 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <readSwitchPins+0x12c>)
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c

			// Blinks green onboard led
			HAL_GPIO_TogglePin(modeLed_GPIO_Port, modeLed_Pin);
 80009d4:	2120      	movs	r1, #32
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <readSwitchPins+0x128>)
 80009d8:	f000 ff5b 	bl	8001892 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80009dc:	2064      	movs	r0, #100	; 0x64
 80009de:	f000 fc71 	bl	80012c4 <HAL_Delay>
		while (run == 1) {
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <readSwitchPins+0x134>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d0c1      	beq.n	800096e <readSwitchPins+0x8e>
		}
		readSwitchPinsFuncExecCounter = 1;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <readSwitchPins+0x124>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

		// Disables green onboard led
		HAL_GPIO_WritePin(modeLed_GPIO_Port, modeLed_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2120      	movs	r1, #32
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <readSwitchPins+0x128>)
 80009f6:	f000 ff33 	bl	8001860 <HAL_GPIO_WritePin>
	}
	run = 1;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <readSwitchPins+0x134>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000004 	.word	0x20000004
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	20000030 	.word	0x20000030
 8000a10:	40020400 	.word	0x40020400
 8000a14:	20000000 	.word	0x20000000

08000a18 <processData>:

void processData(int data) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	int outputArray[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2220      	movs	r2, #32
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 ffb5 	bl	8002998 <memset>

	// Converts decimal number to binary
	for (int i=0; data > 0; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a32:	e015      	b.n	8000a60 <processData+0x48>
		outputArray[i] = data % 2;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	bfb8      	it	lt
 8000a3e:	425b      	neglt	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f843 2c34 	str.w	r2, [r3, #-52]
		data = data / 2;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	0fda      	lsrs	r2, r3, #31
 8000a54:	4413      	add	r3, r2
 8000a56:	105b      	asrs	r3, r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
	for (int i=0; data > 0; i++) {
 8000a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	dce6      	bgt.n	8000a34 <processData+0x1c>
	}

	{
		int startPos = 7;
 8000a66:	2307      	movs	r3, #7
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
		int endPos = 4;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	643b      	str	r3, [r7, #64]	; 0x40
		char halfOfOutputArray[4] = {};
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
		char tmp[1];

		// Processes first part of binary number and sends it to output
		for (; startPos >= endPos; startPos--) {
 8000a72:	e017      	b.n	8000aa4 <processData+0x8c>
			strcat(halfOfOutputArray, itoa(outputArray[startPos], tmp, 10));
 8000a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000a7c:	4413      	add	r3, r2
 8000a7e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000a82:	f107 0114 	add.w	r1, r7, #20
 8000a86:	220a      	movs	r2, #10
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 ff83 	bl	8002994 <itoa>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 ff85 	bl	80029a8 <strcat>
		for (; startPos >= endPos; startPos--) {
 8000a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dae3      	bge.n	8000a74 <processData+0x5c>
		}
		outputData(halfOfOutputArray);
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f835 	bl	8000b20 <outputData>
	}

	HAL_Delay(3000);
 8000ab6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aba:	f000 fc03 	bl	80012c4 <HAL_Delay>

	{
		int startPos = 3;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	647b      	str	r3, [r7, #68]	; 0x44
		int endPos = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
		char halfOfOutputArray[4] = {};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
		char tmp[1];

		// Processes second part of binary number and send it to output
		for (; startPos >= endPos; startPos--) {
 8000aca:	e017      	b.n	8000afc <processData+0xe4>
			strcat(halfOfOutputArray, itoa(outputArray[startPos], tmp, 10));
 8000acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ad4:	4413      	add	r3, r2
 8000ad6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	220a      	movs	r2, #10
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 ff57 	bl	8002994 <itoa>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 ff59 	bl	80029a8 <strcat>
		for (; startPos >= endPos; startPos--) {
 8000af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000af8:	3b01      	subs	r3, #1
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
 8000afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dae3      	bge.n	8000acc <processData+0xb4>
		}
		outputData(halfOfOutputArray);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f809 	bl	8000b20 <outputData>
	}

	HAL_Delay(3000);
 8000b0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b12:	f000 fbd7 	bl	80012c4 <HAL_Delay>
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	; 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <outputData>:


void outputData(char data[4]) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if (strcmp(data, "0000") == 0) {
 8000b28:	49bc      	ldr	r1, [pc, #752]	; (8000e1c <outputData+0x2fc>)
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fb52 	bl	80001d4 <strcmp>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d115      	bne.n	8000b62 <outputData+0x42>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3c:	48b8      	ldr	r0, [pc, #736]	; (8000e20 <outputData+0x300>)
 8000b3e:	f000 fe8f 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	48b7      	ldr	r0, [pc, #732]	; (8000e24 <outputData+0x304>)
 8000b48:	f000 fe8a 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	48b5      	ldr	r0, [pc, #724]	; (8000e28 <outputData+0x308>)
 8000b52:	f000 fe85 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	48b1      	ldr	r0, [pc, #708]	; (8000e20 <outputData+0x300>)
 8000b5c:	f000 fe80 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
	}
}
 8000b60:	e1d2      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "0001") == 0) {
 8000b62:	49b2      	ldr	r1, [pc, #712]	; (8000e2c <outputData+0x30c>)
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fb35 	bl	80001d4 <strcmp>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d115      	bne.n	8000b9c <outputData+0x7c>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b76:	48aa      	ldr	r0, [pc, #680]	; (8000e20 <outputData+0x300>)
 8000b78:	f000 fe72 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	48a8      	ldr	r0, [pc, #672]	; (8000e24 <outputData+0x304>)
 8000b82:	f000 fe6d 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	48a7      	ldr	r0, [pc, #668]	; (8000e28 <outputData+0x308>)
 8000b8c:	f000 fe68 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	48a2      	ldr	r0, [pc, #648]	; (8000e20 <outputData+0x300>)
 8000b96:	f000 fe63 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000b9a:	e1b5      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "0010") == 0) {
 8000b9c:	49a4      	ldr	r1, [pc, #656]	; (8000e30 <outputData+0x310>)
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fb18 	bl	80001d4 <strcmp>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d115      	bne.n	8000bd6 <outputData+0xb6>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	489b      	ldr	r0, [pc, #620]	; (8000e20 <outputData+0x300>)
 8000bb2:	f000 fe55 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	489a      	ldr	r0, [pc, #616]	; (8000e24 <outputData+0x304>)
 8000bbc:	f000 fe50 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	4898      	ldr	r0, [pc, #608]	; (8000e28 <outputData+0x308>)
 8000bc6:	f000 fe4b 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	4894      	ldr	r0, [pc, #592]	; (8000e20 <outputData+0x300>)
 8000bd0:	f000 fe46 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000bd4:	e198      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "0011") == 0) {
 8000bd6:	4997      	ldr	r1, [pc, #604]	; (8000e34 <outputData+0x314>)
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fafb 	bl	80001d4 <strcmp>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d115      	bne.n	8000c10 <outputData+0xf0>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bea:	488d      	ldr	r0, [pc, #564]	; (8000e20 <outputData+0x300>)
 8000bec:	f000 fe38 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	488b      	ldr	r0, [pc, #556]	; (8000e24 <outputData+0x304>)
 8000bf6:	f000 fe33 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	488a      	ldr	r0, [pc, #552]	; (8000e28 <outputData+0x308>)
 8000c00:	f000 fe2e 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	4885      	ldr	r0, [pc, #532]	; (8000e20 <outputData+0x300>)
 8000c0a:	f000 fe29 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000c0e:	e17b      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "0100") == 0) {
 8000c10:	4989      	ldr	r1, [pc, #548]	; (8000e38 <outputData+0x318>)
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fade 	bl	80001d4 <strcmp>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d115      	bne.n	8000c4a <outputData+0x12a>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c24:	487e      	ldr	r0, [pc, #504]	; (8000e20 <outputData+0x300>)
 8000c26:	f000 fe1b 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	487d      	ldr	r0, [pc, #500]	; (8000e24 <outputData+0x304>)
 8000c30:	f000 fe16 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	487b      	ldr	r0, [pc, #492]	; (8000e28 <outputData+0x308>)
 8000c3a:	f000 fe11 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	4877      	ldr	r0, [pc, #476]	; (8000e20 <outputData+0x300>)
 8000c44:	f000 fe0c 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000c48:	e15e      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "0101") == 0) {
 8000c4a:	497c      	ldr	r1, [pc, #496]	; (8000e3c <outputData+0x31c>)
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fac1 	bl	80001d4 <strcmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d115      	bne.n	8000c84 <outputData+0x164>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5e:	4870      	ldr	r0, [pc, #448]	; (8000e20 <outputData+0x300>)
 8000c60:	f000 fdfe 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	486e      	ldr	r0, [pc, #440]	; (8000e24 <outputData+0x304>)
 8000c6a:	f000 fdf9 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	486d      	ldr	r0, [pc, #436]	; (8000e28 <outputData+0x308>)
 8000c74:	f000 fdf4 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	4868      	ldr	r0, [pc, #416]	; (8000e20 <outputData+0x300>)
 8000c7e:	f000 fdef 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000c82:	e141      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "0110") == 0) {
 8000c84:	496e      	ldr	r1, [pc, #440]	; (8000e40 <outputData+0x320>)
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff faa4 	bl	80001d4 <strcmp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d115      	bne.n	8000cbe <outputData+0x19e>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	4861      	ldr	r0, [pc, #388]	; (8000e20 <outputData+0x300>)
 8000c9a:	f000 fde1 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	4860      	ldr	r0, [pc, #384]	; (8000e24 <outputData+0x304>)
 8000ca4:	f000 fddc 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	485e      	ldr	r0, [pc, #376]	; (8000e28 <outputData+0x308>)
 8000cae:	f000 fdd7 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	485a      	ldr	r0, [pc, #360]	; (8000e20 <outputData+0x300>)
 8000cb8:	f000 fdd2 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000cbc:	e124      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "0111") == 0) {
 8000cbe:	4961      	ldr	r1, [pc, #388]	; (8000e44 <outputData+0x324>)
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fa87 	bl	80001d4 <strcmp>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d115      	bne.n	8000cf8 <outputData+0x1d8>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	4853      	ldr	r0, [pc, #332]	; (8000e20 <outputData+0x300>)
 8000cd4:	f000 fdc4 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2180      	movs	r1, #128	; 0x80
 8000cdc:	4851      	ldr	r0, [pc, #324]	; (8000e24 <outputData+0x304>)
 8000cde:	f000 fdbf 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4850      	ldr	r0, [pc, #320]	; (8000e28 <outputData+0x308>)
 8000ce8:	f000 fdba 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	484b      	ldr	r0, [pc, #300]	; (8000e20 <outputData+0x300>)
 8000cf2:	f000 fdb5 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000cf6:	e107      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "1000") == 0) {
 8000cf8:	4953      	ldr	r1, [pc, #332]	; (8000e48 <outputData+0x328>)
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fa6a 	bl	80001d4 <strcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d115      	bne.n	8000d32 <outputData+0x212>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0c:	4844      	ldr	r0, [pc, #272]	; (8000e20 <outputData+0x300>)
 8000d0e:	f000 fda7 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	4843      	ldr	r0, [pc, #268]	; (8000e24 <outputData+0x304>)
 8000d18:	f000 fda2 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	4841      	ldr	r0, [pc, #260]	; (8000e28 <outputData+0x308>)
 8000d22:	f000 fd9d 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	483d      	ldr	r0, [pc, #244]	; (8000e20 <outputData+0x300>)
 8000d2c:	f000 fd98 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000d30:	e0ea      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "1001") == 0) {
 8000d32:	4946      	ldr	r1, [pc, #280]	; (8000e4c <outputData+0x32c>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fa4d 	bl	80001d4 <strcmp>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d115      	bne.n	8000d6c <outputData+0x24c>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d46:	4836      	ldr	r0, [pc, #216]	; (8000e20 <outputData+0x300>)
 8000d48:	f000 fd8a 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	4834      	ldr	r0, [pc, #208]	; (8000e24 <outputData+0x304>)
 8000d52:	f000 fd85 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	4833      	ldr	r0, [pc, #204]	; (8000e28 <outputData+0x308>)
 8000d5c:	f000 fd80 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	482e      	ldr	r0, [pc, #184]	; (8000e20 <outputData+0x300>)
 8000d66:	f000 fd7b 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000d6a:	e0cd      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "1010") == 0) {
 8000d6c:	4938      	ldr	r1, [pc, #224]	; (8000e50 <outputData+0x330>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fa30 	bl	80001d4 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d115      	bne.n	8000da6 <outputData+0x286>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <outputData+0x300>)
 8000d82:	f000 fd6d 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	4826      	ldr	r0, [pc, #152]	; (8000e24 <outputData+0x304>)
 8000d8c:	f000 fd68 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <outputData+0x308>)
 8000d96:	f000 fd63 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	4820      	ldr	r0, [pc, #128]	; (8000e20 <outputData+0x300>)
 8000da0:	f000 fd5e 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000da4:	e0b0      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "1011") == 0) {
 8000da6:	492b      	ldr	r1, [pc, #172]	; (8000e54 <outputData+0x334>)
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fa13 	bl	80001d4 <strcmp>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d115      	bne.n	8000de0 <outputData+0x2c0>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <outputData+0x300>)
 8000dbc:	f000 fd50 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	4817      	ldr	r0, [pc, #92]	; (8000e24 <outputData+0x304>)
 8000dc6:	f000 fd4b 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4816      	ldr	r0, [pc, #88]	; (8000e28 <outputData+0x308>)
 8000dd0:	f000 fd46 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <outputData+0x300>)
 8000dda:	f000 fd41 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000dde:	e093      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "1100") == 0) {
 8000de0:	491d      	ldr	r1, [pc, #116]	; (8000e58 <outputData+0x338>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff f9f6 	bl	80001d4 <strcmp>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d136      	bne.n	8000e5c <outputData+0x33c>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <outputData+0x300>)
 8000df6:	f000 fd33 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <outputData+0x304>)
 8000e00:	f000 fd2e 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <outputData+0x308>)
 8000e0a:	f000 fd29 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <outputData+0x300>)
 8000e14:	f000 fd24 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000e18:	e076      	b.n	8000f08 <outputData+0x3e8>
 8000e1a:	bf00      	nop
 8000e1c:	08002a5c 	.word	0x08002a5c
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	08002a64 	.word	0x08002a64
 8000e30:	08002a6c 	.word	0x08002a6c
 8000e34:	08002a74 	.word	0x08002a74
 8000e38:	08002a7c 	.word	0x08002a7c
 8000e3c:	08002a84 	.word	0x08002a84
 8000e40:	08002a8c 	.word	0x08002a8c
 8000e44:	08002a94 	.word	0x08002a94
 8000e48:	08002a9c 	.word	0x08002a9c
 8000e4c:	08002aa4 	.word	0x08002aa4
 8000e50:	08002aac 	.word	0x08002aac
 8000e54:	08002ab4 	.word	0x08002ab4
 8000e58:	08002abc 	.word	0x08002abc
	else if (strcmp(data, "1101") == 0) {
 8000e5c:	492c      	ldr	r1, [pc, #176]	; (8000f10 <outputData+0x3f0>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff f9b8 	bl	80001d4 <strcmp>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d115      	bne.n	8000e96 <outputData+0x376>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4828      	ldr	r0, [pc, #160]	; (8000f14 <outputData+0x3f4>)
 8000e72:	f000 fcf5 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	4827      	ldr	r0, [pc, #156]	; (8000f18 <outputData+0x3f8>)
 8000e7c:	f000 fcf0 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	4825      	ldr	r0, [pc, #148]	; (8000f1c <outputData+0x3fc>)
 8000e86:	f000 fceb 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4821      	ldr	r0, [pc, #132]	; (8000f14 <outputData+0x3f4>)
 8000e90:	f000 fce6 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000e94:	e038      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "1110") == 0) {
 8000e96:	4922      	ldr	r1, [pc, #136]	; (8000f20 <outputData+0x400>)
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff f99b 	bl	80001d4 <strcmp>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d115      	bne.n	8000ed0 <outputData+0x3b0>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eaa:	481a      	ldr	r0, [pc, #104]	; (8000f14 <outputData+0x3f4>)
 8000eac:	f000 fcd8 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	4818      	ldr	r0, [pc, #96]	; (8000f18 <outputData+0x3f8>)
 8000eb6:	f000 fcd3 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2140      	movs	r1, #64	; 0x40
 8000ebe:	4817      	ldr	r0, [pc, #92]	; (8000f1c <outputData+0x3fc>)
 8000ec0:	f000 fcce 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <outputData+0x3f4>)
 8000eca:	f000 fcc9 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000ece:	e01b      	b.n	8000f08 <outputData+0x3e8>
	else if (strcmp(data, "1111") == 0) {
 8000ed0:	4914      	ldr	r1, [pc, #80]	; (8000f24 <outputData+0x404>)
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff f97e 	bl	80001d4 <strcmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <outputData+0x3e8>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <outputData+0x3f4>)
 8000ee6:	f000 fcbb 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	480a      	ldr	r0, [pc, #40]	; (8000f18 <outputData+0x3f8>)
 8000ef0:	f000 fcb6 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <outputData+0x3fc>)
 8000efa:	f000 fcb1 	bl	8001860 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <outputData+0x3f4>)
 8000f04:	f000 fcac 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	08002ac4 	.word	0x08002ac4
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	08002acc 	.word	0x08002acc
 8000f24:	08002ad4 	.word	0x08002ad4

08000f28 <enableAllLeds>:


void enableAllLeds(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f32:	480a      	ldr	r0, [pc, #40]	; (8000f5c <enableAllLeds+0x34>)
 8000f34:	f000 fc94 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <enableAllLeds+0x38>)
 8000f3e:	f000 fc8f 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <enableAllLeds+0x3c>)
 8000f48:	f000 fc8a 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <enableAllLeds+0x34>)
 8000f52:	f000 fc85 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020400 	.word	0x40020400

08000f68 <disableAllLeds>:


void disableAllLeds(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f72:	480a      	ldr	r0, [pc, #40]	; (8000f9c <disableAllLeds+0x34>)
 8000f74:	f000 fc74 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <disableAllLeds+0x38>)
 8000f7e:	f000 fc6f 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <disableAllLeds+0x3c>)
 8000f88:	f000 fc6a 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <disableAllLeds+0x34>)
 8000f92:	f000 fc65 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_MspInit+0x5c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_MspInit+0x5c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_MspInit+0x5c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_MspInit+0x5c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_MspInit+0x5c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f000 fa56 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	2005      	movs	r0, #5
 8001002:	f000 fa5c 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001006:	2005      	movs	r0, #5
 8001008:	f000 fa75 	bl	80014f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_UART_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12b      	bne.n	8001092 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_UART_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_UART_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001072:	230c      	movs	r3, #12
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001082:	2307      	movs	r3, #7
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_UART_MspInit+0x8c>)
 800108e:	f000 fa4d 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004400 	.word	0x40004400
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f8c2 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	for(int i = 0; i < 65535; i++);
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e002      	b.n	8001126 <EXTI15_10_IRQHandler+0x12>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800112c:	4293      	cmp	r3, r2
 800112e:	ddf7      	ble.n	8001120 <EXTI15_10_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <EXTI15_10_IRQHandler+0x44>)
 8001136:	f000 fb7b 	bl	8001830 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <EXTI15_10_IRQHandler+0x32>
		run = 0;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <EXTI15_10_IRQHandler+0x48>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001146:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800114a:	f000 fbbd 	bl	80018c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020800 	.word	0x40020800
 800115c:	20000000 	.word	0x20000000

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SystemInit+0x28>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <SystemInit+0x28>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SystemInit+0x28>)
 8001176:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800117a:	609a      	str	r2, [r3, #8]
#endif
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001190:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001192:	e003      	b.n	800119c <LoopCopyDataInit>

08001194 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001196:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001198:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800119a:	3104      	adds	r1, #4

0800119c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a4:	d3f6      	bcc.n	8001194 <CopyDataInit>
  ldr  r2, =_sbss
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011a8:	e002      	b.n	80011b0 <LoopFillZerobss>

080011aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011ac:	f842 3b04 	str.w	r3, [r2], #4

080011b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b4:	d3f9      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011b6:	f7ff ffd3 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 fbaf 	bl	800291c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff f993 	bl	80004e8 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80011c8:	08002b2c 	.word	0x08002b2c
  ldr  r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80011d4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80011d8:	200000a4 	.word	0x200000a4

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f94d 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fed0 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f965 	bl	8001512 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f92d 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000008 	.word	0x20000008
 800127c:	20000010 	.word	0x20000010
 8001280:	2000000c 	.word	0x2000000c

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000010 	.word	0x20000010
 80012a8:	200000a0 	.word	0x200000a0

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200000a0 	.word	0x200000a0

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_Delay+0x40>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000010 	.word	0x20000010

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff3e 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff31 	bl	800136c <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e159      	b.n	80017fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 8148 	bne.w	80017f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00b      	beq.n	8001586 <HAL_GPIO_Init+0x5a>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800157a:	2b11      	cmp	r3, #17
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b12      	cmp	r3, #18
 8001584:	d130      	bne.n	80015e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0xfc>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b12      	cmp	r3, #18
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a2 	beq.w	80017f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_GPIO_Init+0x2e4>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a55      	ldr	r2, [pc, #340]	; (8001810 <HAL_GPIO_Init+0x2e4>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_GPIO_Init+0x2e4>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a51      	ldr	r2, [pc, #324]	; (8001814 <HAL_GPIO_Init+0x2e8>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a48      	ldr	r2, [pc, #288]	; (8001818 <HAL_GPIO_Init+0x2ec>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x202>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a47      	ldr	r2, [pc, #284]	; (800181c <HAL_GPIO_Init+0x2f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x1fe>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a46      	ldr	r2, [pc, #280]	; (8001820 <HAL_GPIO_Init+0x2f4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x1fa>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a45      	ldr	r2, [pc, #276]	; (8001824 <HAL_GPIO_Init+0x2f8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x1f6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a44      	ldr	r2, [pc, #272]	; (8001828 <HAL_GPIO_Init+0x2fc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x1f2>
 800171a:	2304      	movs	r3, #4
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800171e:	2307      	movs	r3, #7
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x204>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x204>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4934      	ldr	r1, [pc, #208]	; (8001814 <HAL_GPIO_Init+0x2e8>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_GPIO_Init+0x300>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001772:	4a2e      	ldr	r2, [pc, #184]	; (800182c <HAL_GPIO_Init+0x300>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_GPIO_Init+0x300>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179c:	4a23      	ldr	r2, [pc, #140]	; (800182c <HAL_GPIO_Init+0x300>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_GPIO_Init+0x300>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_GPIO_Init+0x300>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_GPIO_Init+0x300>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_GPIO_Init+0x300>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f aea2 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	3724      	adds	r7, #36	; 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	401a      	ands	r2, r3
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d104      	bne.n	80018b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f806 	bl	80018f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013c00 	.word	0x40013c00

080018f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e25b      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d075      	beq.n	8001a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800192e:	4ba3      	ldr	r3, [pc, #652]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b04      	cmp	r3, #4
 8001938:	d00c      	beq.n	8001954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4ba0      	ldr	r3, [pc, #640]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001942:	2b08      	cmp	r3, #8
 8001944:	d112      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001946:	4b9d      	ldr	r3, [pc, #628]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001952:	d10b      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4b99      	ldr	r3, [pc, #612]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d05b      	beq.n	8001a18 <HAL_RCC_OscConfig+0x108>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d157      	bne.n	8001a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e236      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x74>
 8001976:	4b91      	ldr	r3, [pc, #580]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a90      	ldr	r2, [pc, #576]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x98>
 800198e:	4b8b      	ldr	r3, [pc, #556]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a8a      	ldr	r2, [pc, #552]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a87      	ldr	r2, [pc, #540]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 80019a8:	4b84      	ldr	r3, [pc, #528]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a83      	ldr	r2, [pc, #524]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a80      	ldr	r2, [pc, #512]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fc70 	bl	80012ac <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fc6c 	bl	80012ac <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1fb      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xc0>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc5c 	bl	80012ac <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fc58 	bl	80012ac <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1e7      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0xe8>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a26:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a32:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x152>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e1bb      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4952      	ldr	r1, [pc, #328]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fc11 	bl	80012ac <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fc0d 	bl	80012ac <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e19c      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4940      	ldr	r1, [pc, #256]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fbf0 	bl	80012ac <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fbec 	bl	80012ac <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e17b      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d030      	beq.n	8001b5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d016      	beq.n	8001b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_RCC_OscConfig+0x2b4>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff fbd0 	bl	80012ac <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fbcc 	bl	80012ac <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e15b      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x200>
 8001b2e:	e015      	b.n	8001b5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x2b4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fbb9 	bl	80012ac <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fbb5 	bl	80012ac <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e144      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80a0 	beq.w	8001caa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d121      	bne.n	8001bea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fb7b 	bl	80012ac <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	e011      	b.n	8001bde <HAL_RCC_OscConfig+0x2ce>
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	42470000 	.word	0x42470000
 8001bc4:	42470e80 	.word	0x42470e80
 8001bc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff fb6e 	bl	80012ac <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0fd      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <HAL_RCC_OscConfig+0x4d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
 8001bf2:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	4a7c      	ldr	r2, [pc, #496]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfe:	e01c      	b.n	8001c3a <HAL_RCC_OscConfig+0x32a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x312>
 8001c08:	4b77      	ldr	r3, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a76      	ldr	r2, [pc, #472]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
 8001c14:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a73      	ldr	r2, [pc, #460]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x32a>
 8001c22:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	4a70      	ldr	r2, [pc, #448]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d015      	beq.n	8001c6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb33 	bl	80012ac <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7ff fb2f 	bl	80012ac <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0bc      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ee      	beq.n	8001c4a <HAL_RCC_OscConfig+0x33a>
 8001c6c:	e014      	b.n	8001c98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fb1d 	bl	80012ac <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fb19 	bl	80012ac <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0a6      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9e:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8092 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d05c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d141      	bne.n	8001d4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_RCC_OscConfig+0x4dc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff faed 	bl	80012ac <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff fae9 	bl	80012ac <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e078      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	019b      	lsls	r3, r3, #6
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	061b      	lsls	r3, r3, #24
 8001d18:	4933      	ldr	r1, [pc, #204]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_RCC_OscConfig+0x4dc>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fac2 	bl	80012ac <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff fabe 	bl	80012ac <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e04d      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x41c>
 8001d4a:	e045      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x4dc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff faab 	bl	80012ac <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff faa7 	bl	80012ac <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e036      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x44a>
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e029      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d115      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	42470060 	.word	0x42470060

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cc      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d90c      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b8      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e44:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a52      	ldr	r2, [pc, #328]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	494d      	ldr	r1, [pc, #308]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d044      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d119      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e067      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4934      	ldr	r1, [pc, #208]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f9e4 	bl	80012ac <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7ff f9e0 	bl	80012ac <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e04f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d20c      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e032      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4916      	ldr	r1, [pc, #88]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	490e      	ldr	r1, [pc, #56]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f76:	f000 f821 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f944 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08002adc 	.word	0x08002adc
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	2000000c 	.word	0x2000000c

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d007      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x32>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x38>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 808d 	bne.w	8002102 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fea:	60bb      	str	r3, [r7, #8]
       break;
 8001fec:	e08c      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_RCC_GetSysClockFreq+0x160>)
 8001ff0:	60bb      	str	r3, [r7, #8]
      break;
 8001ff2:	e089      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ffc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffe:	4b45      	ldr	r3, [pc, #276]	; (8002114 <HAL_RCC_GetSysClockFreq+0x158>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d023      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b42      	ldr	r3, [pc, #264]	; (8002114 <HAL_RCC_GetSysClockFreq+0x158>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	ea03 0501 	and.w	r5, r3, r1
 8002020:	ea04 0602 	and.w	r6, r4, r2
 8002024:	4a3d      	ldr	r2, [pc, #244]	; (800211c <HAL_RCC_GetSysClockFreq+0x160>)
 8002026:	fb02 f106 	mul.w	r1, r2, r6
 800202a:	2200      	movs	r2, #0
 800202c:	fb02 f205 	mul.w	r2, r2, r5
 8002030:	440a      	add	r2, r1
 8002032:	493a      	ldr	r1, [pc, #232]	; (800211c <HAL_RCC_GetSysClockFreq+0x160>)
 8002034:	fba5 0101 	umull	r0, r1, r5, r1
 8002038:	1853      	adds	r3, r2, r1
 800203a:	4619      	mov	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f04f 0400 	mov.w	r4, #0
 8002042:	461a      	mov	r2, r3
 8002044:	4623      	mov	r3, r4
 8002046:	f7fe f8cf 	bl	80001e8 <__aeabi_uldivmod>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e049      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_GetSysClockFreq+0x158>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	ea03 0501 	and.w	r5, r3, r1
 8002068:	ea04 0602 	and.w	r6, r4, r2
 800206c:	4629      	mov	r1, r5
 800206e:	4632      	mov	r2, r6
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	0154      	lsls	r4, r2, #5
 800207a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800207e:	014b      	lsls	r3, r1, #5
 8002080:	4619      	mov	r1, r3
 8002082:	4622      	mov	r2, r4
 8002084:	1b49      	subs	r1, r1, r5
 8002086:	eb62 0206 	sbc.w	r2, r2, r6
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	0194      	lsls	r4, r2, #6
 8002094:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002098:	018b      	lsls	r3, r1, #6
 800209a:	1a5b      	subs	r3, r3, r1
 800209c:	eb64 0402 	sbc.w	r4, r4, r2
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ae:	00d9      	lsls	r1, r3, #3
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	195b      	adds	r3, r3, r5
 80020b6:	eb44 0406 	adc.w	r4, r4, r6
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	02a2      	lsls	r2, r4, #10
 80020c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020c8:	0299      	lsls	r1, r3, #10
 80020ca:	460b      	mov	r3, r1
 80020cc:	4614      	mov	r4, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	4621      	mov	r1, r4
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	f7fe f884 	bl	80001e8 <__aeabi_uldivmod>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_GetSysClockFreq+0x158>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	3301      	adds	r3, #1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	60bb      	str	r3, [r7, #8]
      break;
 8002100:	e002      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002104:	60bb      	str	r3, [r7, #8]
      break;
 8002106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002108:	68bb      	ldr	r3, [r7, #8]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	00f42400 	.word	0x00f42400
 800211c:	017d7840 	.word	0x017d7840

08002120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800213c:	f7ff fff0 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002140:	4601      	mov	r1, r0
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0a9b      	lsrs	r3, r3, #10
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <HAL_RCC_GetPCLK1Freq+0x24>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	08002aec 	.word	0x08002aec

08002160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002164:	f7ff ffdc 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002168:	4601      	mov	r1, r0
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0b5b      	lsrs	r3, r3, #13
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4a03      	ldr	r2, [pc, #12]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	fa21 f303 	lsr.w	r3, r1, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800
 8002184:	08002aec 	.word	0x08002aec

08002188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e03f      	b.n	800221a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe ff32 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f829 	bl	8002224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002266:	f023 030c 	bic.w	r3, r3, #12
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	68f9      	ldr	r1, [r7, #12]
 8002270:	430b      	orrs	r3, r1
 8002272:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002292:	f040 818b 	bne.w	80025ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4ac1      	ldr	r2, [pc, #772]	; (80025a0 <UART_SetConfig+0x37c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d005      	beq.n	80022ac <UART_SetConfig+0x88>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4abf      	ldr	r2, [pc, #764]	; (80025a4 <UART_SetConfig+0x380>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	f040 80bd 	bne.w	8002426 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022ac:	f7ff ff58 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 80022b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	461d      	mov	r5, r3
 80022b6:	f04f 0600 	mov.w	r6, #0
 80022ba:	46a8      	mov	r8, r5
 80022bc:	46b1      	mov	r9, r6
 80022be:	eb18 0308 	adds.w	r3, r8, r8
 80022c2:	eb49 0409 	adc.w	r4, r9, r9
 80022c6:	4698      	mov	r8, r3
 80022c8:	46a1      	mov	r9, r4
 80022ca:	eb18 0805 	adds.w	r8, r8, r5
 80022ce:	eb49 0906 	adc.w	r9, r9, r6
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022e6:	4688      	mov	r8, r1
 80022e8:	4691      	mov	r9, r2
 80022ea:	eb18 0005 	adds.w	r0, r8, r5
 80022ee:	eb49 0106 	adc.w	r1, r9, r6
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	461d      	mov	r5, r3
 80022f8:	f04f 0600 	mov.w	r6, #0
 80022fc:	196b      	adds	r3, r5, r5
 80022fe:	eb46 0406 	adc.w	r4, r6, r6
 8002302:	461a      	mov	r2, r3
 8002304:	4623      	mov	r3, r4
 8002306:	f7fd ff6f 	bl	80001e8 <__aeabi_uldivmod>
 800230a:	4603      	mov	r3, r0
 800230c:	460c      	mov	r4, r1
 800230e:	461a      	mov	r2, r3
 8002310:	4ba5      	ldr	r3, [pc, #660]	; (80025a8 <UART_SetConfig+0x384>)
 8002312:	fba3 2302 	umull	r2, r3, r3, r2
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	461d      	mov	r5, r3
 8002320:	f04f 0600 	mov.w	r6, #0
 8002324:	46a9      	mov	r9, r5
 8002326:	46b2      	mov	sl, r6
 8002328:	eb19 0309 	adds.w	r3, r9, r9
 800232c:	eb4a 040a 	adc.w	r4, sl, sl
 8002330:	4699      	mov	r9, r3
 8002332:	46a2      	mov	sl, r4
 8002334:	eb19 0905 	adds.w	r9, r9, r5
 8002338:	eb4a 0a06 	adc.w	sl, sl, r6
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002348:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800234c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002350:	4689      	mov	r9, r1
 8002352:	4692      	mov	sl, r2
 8002354:	eb19 0005 	adds.w	r0, r9, r5
 8002358:	eb4a 0106 	adc.w	r1, sl, r6
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	461d      	mov	r5, r3
 8002362:	f04f 0600 	mov.w	r6, #0
 8002366:	196b      	adds	r3, r5, r5
 8002368:	eb46 0406 	adc.w	r4, r6, r6
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	f7fd ff3a 	bl	80001e8 <__aeabi_uldivmod>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	461a      	mov	r2, r3
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <UART_SetConfig+0x384>)
 800237c:	fba3 1302 	umull	r1, r3, r3, r2
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	2164      	movs	r1, #100	; 0x64
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3332      	adds	r3, #50	; 0x32
 800238e:	4a86      	ldr	r2, [pc, #536]	; (80025a8 <UART_SetConfig+0x384>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800239c:	4498      	add	r8, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	461d      	mov	r5, r3
 80023a2:	f04f 0600 	mov.w	r6, #0
 80023a6:	46a9      	mov	r9, r5
 80023a8:	46b2      	mov	sl, r6
 80023aa:	eb19 0309 	adds.w	r3, r9, r9
 80023ae:	eb4a 040a 	adc.w	r4, sl, sl
 80023b2:	4699      	mov	r9, r3
 80023b4:	46a2      	mov	sl, r4
 80023b6:	eb19 0905 	adds.w	r9, r9, r5
 80023ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023d2:	4689      	mov	r9, r1
 80023d4:	4692      	mov	sl, r2
 80023d6:	eb19 0005 	adds.w	r0, r9, r5
 80023da:	eb4a 0106 	adc.w	r1, sl, r6
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	461d      	mov	r5, r3
 80023e4:	f04f 0600 	mov.w	r6, #0
 80023e8:	196b      	adds	r3, r5, r5
 80023ea:	eb46 0406 	adc.w	r4, r6, r6
 80023ee:	461a      	mov	r2, r3
 80023f0:	4623      	mov	r3, r4
 80023f2:	f7fd fef9 	bl	80001e8 <__aeabi_uldivmod>
 80023f6:	4603      	mov	r3, r0
 80023f8:	460c      	mov	r4, r1
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <UART_SetConfig+0x384>)
 80023fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2164      	movs	r1, #100	; 0x64
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	3332      	adds	r3, #50	; 0x32
 8002410:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <UART_SetConfig+0x384>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	f003 0207 	and.w	r2, r3, #7
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4442      	add	r2, r8
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	e26f      	b.n	8002906 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002426:	f7ff fe87 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 800242a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	461d      	mov	r5, r3
 8002430:	f04f 0600 	mov.w	r6, #0
 8002434:	46a8      	mov	r8, r5
 8002436:	46b1      	mov	r9, r6
 8002438:	eb18 0308 	adds.w	r3, r8, r8
 800243c:	eb49 0409 	adc.w	r4, r9, r9
 8002440:	4698      	mov	r8, r3
 8002442:	46a1      	mov	r9, r4
 8002444:	eb18 0805 	adds.w	r8, r8, r5
 8002448:	eb49 0906 	adc.w	r9, r9, r6
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002458:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800245c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002460:	4688      	mov	r8, r1
 8002462:	4691      	mov	r9, r2
 8002464:	eb18 0005 	adds.w	r0, r8, r5
 8002468:	eb49 0106 	adc.w	r1, r9, r6
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	461d      	mov	r5, r3
 8002472:	f04f 0600 	mov.w	r6, #0
 8002476:	196b      	adds	r3, r5, r5
 8002478:	eb46 0406 	adc.w	r4, r6, r6
 800247c:	461a      	mov	r2, r3
 800247e:	4623      	mov	r3, r4
 8002480:	f7fd feb2 	bl	80001e8 <__aeabi_uldivmod>
 8002484:	4603      	mov	r3, r0
 8002486:	460c      	mov	r4, r1
 8002488:	461a      	mov	r2, r3
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <UART_SetConfig+0x384>)
 800248c:	fba3 2302 	umull	r2, r3, r3, r2
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	461d      	mov	r5, r3
 800249a:	f04f 0600 	mov.w	r6, #0
 800249e:	46a9      	mov	r9, r5
 80024a0:	46b2      	mov	sl, r6
 80024a2:	eb19 0309 	adds.w	r3, r9, r9
 80024a6:	eb4a 040a 	adc.w	r4, sl, sl
 80024aa:	4699      	mov	r9, r3
 80024ac:	46a2      	mov	sl, r4
 80024ae:	eb19 0905 	adds.w	r9, r9, r5
 80024b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024ca:	4689      	mov	r9, r1
 80024cc:	4692      	mov	sl, r2
 80024ce:	eb19 0005 	adds.w	r0, r9, r5
 80024d2:	eb4a 0106 	adc.w	r1, sl, r6
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	461d      	mov	r5, r3
 80024dc:	f04f 0600 	mov.w	r6, #0
 80024e0:	196b      	adds	r3, r5, r5
 80024e2:	eb46 0406 	adc.w	r4, r6, r6
 80024e6:	461a      	mov	r2, r3
 80024e8:	4623      	mov	r3, r4
 80024ea:	f7fd fe7d 	bl	80001e8 <__aeabi_uldivmod>
 80024ee:	4603      	mov	r3, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <UART_SetConfig+0x384>)
 80024f6:	fba3 1302 	umull	r1, r3, r3, r2
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2164      	movs	r1, #100	; 0x64
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	3332      	adds	r3, #50	; 0x32
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <UART_SetConfig+0x384>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002516:	4498      	add	r8, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	461d      	mov	r5, r3
 800251c:	f04f 0600 	mov.w	r6, #0
 8002520:	46a9      	mov	r9, r5
 8002522:	46b2      	mov	sl, r6
 8002524:	eb19 0309 	adds.w	r3, r9, r9
 8002528:	eb4a 040a 	adc.w	r4, sl, sl
 800252c:	4699      	mov	r9, r3
 800252e:	46a2      	mov	sl, r4
 8002530:	eb19 0905 	adds.w	r9, r9, r5
 8002534:	eb4a 0a06 	adc.w	sl, sl, r6
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002544:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002548:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800254c:	4689      	mov	r9, r1
 800254e:	4692      	mov	sl, r2
 8002550:	eb19 0005 	adds.w	r0, r9, r5
 8002554:	eb4a 0106 	adc.w	r1, sl, r6
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	461d      	mov	r5, r3
 800255e:	f04f 0600 	mov.w	r6, #0
 8002562:	196b      	adds	r3, r5, r5
 8002564:	eb46 0406 	adc.w	r4, r6, r6
 8002568:	461a      	mov	r2, r3
 800256a:	4623      	mov	r3, r4
 800256c:	f7fd fe3c 	bl	80001e8 <__aeabi_uldivmod>
 8002570:	4603      	mov	r3, r0
 8002572:	460c      	mov	r4, r1
 8002574:	461a      	mov	r2, r3
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <UART_SetConfig+0x384>)
 8002578:	fba3 1302 	umull	r1, r3, r3, r2
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	2164      	movs	r1, #100	; 0x64
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	3332      	adds	r3, #50	; 0x32
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <UART_SetConfig+0x384>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	f003 0207 	and.w	r2, r3, #7
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4442      	add	r2, r8
 800259c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800259e:	e1b2      	b.n	8002906 <UART_SetConfig+0x6e2>
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40011400 	.word	0x40011400
 80025a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4ad7      	ldr	r2, [pc, #860]	; (8002910 <UART_SetConfig+0x6ec>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d005      	beq.n	80025c2 <UART_SetConfig+0x39e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4ad6      	ldr	r2, [pc, #856]	; (8002914 <UART_SetConfig+0x6f0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	f040 80d1 	bne.w	8002764 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80025c2:	f7ff fdcd 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 80025c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	469a      	mov	sl, r3
 80025cc:	f04f 0b00 	mov.w	fp, #0
 80025d0:	46d0      	mov	r8, sl
 80025d2:	46d9      	mov	r9, fp
 80025d4:	eb18 0308 	adds.w	r3, r8, r8
 80025d8:	eb49 0409 	adc.w	r4, r9, r9
 80025dc:	4698      	mov	r8, r3
 80025de:	46a1      	mov	r9, r4
 80025e0:	eb18 080a 	adds.w	r8, r8, sl
 80025e4:	eb49 090b 	adc.w	r9, r9, fp
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025fc:	4688      	mov	r8, r1
 80025fe:	4691      	mov	r9, r2
 8002600:	eb1a 0508 	adds.w	r5, sl, r8
 8002604:	eb4b 0609 	adc.w	r6, fp, r9
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4619      	mov	r1, r3
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	f04f 0400 	mov.w	r4, #0
 800261a:	0094      	lsls	r4, r2, #2
 800261c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002620:	008b      	lsls	r3, r1, #2
 8002622:	461a      	mov	r2, r3
 8002624:	4623      	mov	r3, r4
 8002626:	4628      	mov	r0, r5
 8002628:	4631      	mov	r1, r6
 800262a:	f7fd fddd 	bl	80001e8 <__aeabi_uldivmod>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	461a      	mov	r2, r3
 8002634:	4bb8      	ldr	r3, [pc, #736]	; (8002918 <UART_SetConfig+0x6f4>)
 8002636:	fba3 2302 	umull	r2, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	469b      	mov	fp, r3
 8002644:	f04f 0c00 	mov.w	ip, #0
 8002648:	46d9      	mov	r9, fp
 800264a:	46e2      	mov	sl, ip
 800264c:	eb19 0309 	adds.w	r3, r9, r9
 8002650:	eb4a 040a 	adc.w	r4, sl, sl
 8002654:	4699      	mov	r9, r3
 8002656:	46a2      	mov	sl, r4
 8002658:	eb19 090b 	adds.w	r9, r9, fp
 800265c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800266c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002670:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002674:	4689      	mov	r9, r1
 8002676:	4692      	mov	sl, r2
 8002678:	eb1b 0509 	adds.w	r5, fp, r9
 800267c:	eb4c 060a 	adc.w	r6, ip, sl
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4619      	mov	r1, r3
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f04f 0400 	mov.w	r4, #0
 8002692:	0094      	lsls	r4, r2, #2
 8002694:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002698:	008b      	lsls	r3, r1, #2
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	4628      	mov	r0, r5
 80026a0:	4631      	mov	r1, r6
 80026a2:	f7fd fda1 	bl	80001e8 <__aeabi_uldivmod>
 80026a6:	4603      	mov	r3, r0
 80026a8:	460c      	mov	r4, r1
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b9a      	ldr	r3, [pc, #616]	; (8002918 <UART_SetConfig+0x6f4>)
 80026ae:	fba3 1302 	umull	r1, r3, r3, r2
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2164      	movs	r1, #100	; 0x64
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	3332      	adds	r3, #50	; 0x32
 80026c0:	4a95      	ldr	r2, [pc, #596]	; (8002918 <UART_SetConfig+0x6f4>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026cc:	4498      	add	r8, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	469b      	mov	fp, r3
 80026d2:	f04f 0c00 	mov.w	ip, #0
 80026d6:	46d9      	mov	r9, fp
 80026d8:	46e2      	mov	sl, ip
 80026da:	eb19 0309 	adds.w	r3, r9, r9
 80026de:	eb4a 040a 	adc.w	r4, sl, sl
 80026e2:	4699      	mov	r9, r3
 80026e4:	46a2      	mov	sl, r4
 80026e6:	eb19 090b 	adds.w	r9, r9, fp
 80026ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002702:	4689      	mov	r9, r1
 8002704:	4692      	mov	sl, r2
 8002706:	eb1b 0509 	adds.w	r5, fp, r9
 800270a:	eb4c 060a 	adc.w	r6, ip, sl
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f04f 0400 	mov.w	r4, #0
 8002720:	0094      	lsls	r4, r2, #2
 8002722:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002726:	008b      	lsls	r3, r1, #2
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	4628      	mov	r0, r5
 800272e:	4631      	mov	r1, r6
 8002730:	f7fd fd5a 	bl	80001e8 <__aeabi_uldivmod>
 8002734:	4603      	mov	r3, r0
 8002736:	460c      	mov	r4, r1
 8002738:	461a      	mov	r2, r3
 800273a:	4b77      	ldr	r3, [pc, #476]	; (8002918 <UART_SetConfig+0x6f4>)
 800273c:	fba3 1302 	umull	r1, r3, r3, r2
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	2164      	movs	r1, #100	; 0x64
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	3332      	adds	r3, #50	; 0x32
 800274e:	4a72      	ldr	r2, [pc, #456]	; (8002918 <UART_SetConfig+0x6f4>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	f003 020f 	and.w	r2, r3, #15
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4442      	add	r2, r8
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	e0d0      	b.n	8002906 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002764:	f7ff fce8 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002768:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	469a      	mov	sl, r3
 800276e:	f04f 0b00 	mov.w	fp, #0
 8002772:	46d0      	mov	r8, sl
 8002774:	46d9      	mov	r9, fp
 8002776:	eb18 0308 	adds.w	r3, r8, r8
 800277a:	eb49 0409 	adc.w	r4, r9, r9
 800277e:	4698      	mov	r8, r3
 8002780:	46a1      	mov	r9, r4
 8002782:	eb18 080a 	adds.w	r8, r8, sl
 8002786:	eb49 090b 	adc.w	r9, r9, fp
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002796:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800279a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800279e:	4688      	mov	r8, r1
 80027a0:	4691      	mov	r9, r2
 80027a2:	eb1a 0508 	adds.w	r5, sl, r8
 80027a6:	eb4b 0609 	adc.w	r6, fp, r9
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4619      	mov	r1, r3
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	f04f 0400 	mov.w	r4, #0
 80027bc:	0094      	lsls	r4, r2, #2
 80027be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027c2:	008b      	lsls	r3, r1, #2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	4631      	mov	r1, r6
 80027cc:	f7fd fd0c 	bl	80001e8 <__aeabi_uldivmod>
 80027d0:	4603      	mov	r3, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b50      	ldr	r3, [pc, #320]	; (8002918 <UART_SetConfig+0x6f4>)
 80027d8:	fba3 2302 	umull	r2, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	469b      	mov	fp, r3
 80027e6:	f04f 0c00 	mov.w	ip, #0
 80027ea:	46d9      	mov	r9, fp
 80027ec:	46e2      	mov	sl, ip
 80027ee:	eb19 0309 	adds.w	r3, r9, r9
 80027f2:	eb4a 040a 	adc.w	r4, sl, sl
 80027f6:	4699      	mov	r9, r3
 80027f8:	46a2      	mov	sl, r4
 80027fa:	eb19 090b 	adds.w	r9, r9, fp
 80027fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800280e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002816:	4689      	mov	r9, r1
 8002818:	4692      	mov	sl, r2
 800281a:	eb1b 0509 	adds.w	r5, fp, r9
 800281e:	eb4c 060a 	adc.w	r6, ip, sl
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4619      	mov	r1, r3
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	0094      	lsls	r4, r2, #2
 8002836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800283a:	008b      	lsls	r3, r1, #2
 800283c:	461a      	mov	r2, r3
 800283e:	4623      	mov	r3, r4
 8002840:	4628      	mov	r0, r5
 8002842:	4631      	mov	r1, r6
 8002844:	f7fd fcd0 	bl	80001e8 <__aeabi_uldivmod>
 8002848:	4603      	mov	r3, r0
 800284a:	460c      	mov	r4, r1
 800284c:	461a      	mov	r2, r3
 800284e:	4b32      	ldr	r3, [pc, #200]	; (8002918 <UART_SetConfig+0x6f4>)
 8002850:	fba3 1302 	umull	r1, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	2164      	movs	r1, #100	; 0x64
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	3332      	adds	r3, #50	; 0x32
 8002862:	4a2d      	ldr	r2, [pc, #180]	; (8002918 <UART_SetConfig+0x6f4>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286e:	4498      	add	r8, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	469b      	mov	fp, r3
 8002874:	f04f 0c00 	mov.w	ip, #0
 8002878:	46d9      	mov	r9, fp
 800287a:	46e2      	mov	sl, ip
 800287c:	eb19 0309 	adds.w	r3, r9, r9
 8002880:	eb4a 040a 	adc.w	r4, sl, sl
 8002884:	4699      	mov	r9, r3
 8002886:	46a2      	mov	sl, r4
 8002888:	eb19 090b 	adds.w	r9, r9, fp
 800288c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800289c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028a4:	4689      	mov	r9, r1
 80028a6:	4692      	mov	sl, r2
 80028a8:	eb1b 0509 	adds.w	r5, fp, r9
 80028ac:	eb4c 060a 	adc.w	r6, ip, sl
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	f04f 0400 	mov.w	r4, #0
 80028c2:	0094      	lsls	r4, r2, #2
 80028c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028c8:	008b      	lsls	r3, r1, #2
 80028ca:	461a      	mov	r2, r3
 80028cc:	4623      	mov	r3, r4
 80028ce:	4628      	mov	r0, r5
 80028d0:	4631      	mov	r1, r6
 80028d2:	f7fd fc89 	bl	80001e8 <__aeabi_uldivmod>
 80028d6:	4603      	mov	r3, r0
 80028d8:	460c      	mov	r4, r1
 80028da:	461a      	mov	r2, r3
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <UART_SetConfig+0x6f4>)
 80028de:	fba3 1302 	umull	r1, r3, r3, r2
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2164      	movs	r1, #100	; 0x64
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	3332      	adds	r3, #50	; 0x32
 80028f0:	4a09      	ldr	r2, [pc, #36]	; (8002918 <UART_SetConfig+0x6f4>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4442      	add	r2, r8
 8002902:	609a      	str	r2, [r3, #8]
}
 8002904:	e7ff      	b.n	8002906 <UART_SetConfig+0x6e2>
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002910:	40011000 	.word	0x40011000
 8002914:	40011400 	.word	0x40011400
 8002918:	51eb851f 	.word	0x51eb851f

0800291c <__libc_init_array>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	4e0d      	ldr	r6, [pc, #52]	; (8002954 <__libc_init_array+0x38>)
 8002920:	4c0d      	ldr	r4, [pc, #52]	; (8002958 <__libc_init_array+0x3c>)
 8002922:	1ba4      	subs	r4, r4, r6
 8002924:	10a4      	asrs	r4, r4, #2
 8002926:	2500      	movs	r5, #0
 8002928:	42a5      	cmp	r5, r4
 800292a:	d109      	bne.n	8002940 <__libc_init_array+0x24>
 800292c:	4e0b      	ldr	r6, [pc, #44]	; (800295c <__libc_init_array+0x40>)
 800292e:	4c0c      	ldr	r4, [pc, #48]	; (8002960 <__libc_init_array+0x44>)
 8002930:	f000 f888 	bl	8002a44 <_init>
 8002934:	1ba4      	subs	r4, r4, r6
 8002936:	10a4      	asrs	r4, r4, #2
 8002938:	2500      	movs	r5, #0
 800293a:	42a5      	cmp	r5, r4
 800293c:	d105      	bne.n	800294a <__libc_init_array+0x2e>
 800293e:	bd70      	pop	{r4, r5, r6, pc}
 8002940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002944:	4798      	blx	r3
 8002946:	3501      	adds	r5, #1
 8002948:	e7ee      	b.n	8002928 <__libc_init_array+0xc>
 800294a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800294e:	4798      	blx	r3
 8002950:	3501      	adds	r5, #1
 8002952:	e7f2      	b.n	800293a <__libc_init_array+0x1e>
 8002954:	08002b24 	.word	0x08002b24
 8002958:	08002b24 	.word	0x08002b24
 800295c:	08002b24 	.word	0x08002b24
 8002960:	08002b28 	.word	0x08002b28

08002964 <__itoa>:
 8002964:	1e93      	subs	r3, r2, #2
 8002966:	2b22      	cmp	r3, #34	; 0x22
 8002968:	b510      	push	{r4, lr}
 800296a:	460c      	mov	r4, r1
 800296c:	d904      	bls.n	8002978 <__itoa+0x14>
 800296e:	2300      	movs	r3, #0
 8002970:	700b      	strb	r3, [r1, #0]
 8002972:	461c      	mov	r4, r3
 8002974:	4620      	mov	r0, r4
 8002976:	bd10      	pop	{r4, pc}
 8002978:	2a0a      	cmp	r2, #10
 800297a:	d109      	bne.n	8002990 <__itoa+0x2c>
 800297c:	2800      	cmp	r0, #0
 800297e:	da07      	bge.n	8002990 <__itoa+0x2c>
 8002980:	232d      	movs	r3, #45	; 0x2d
 8002982:	700b      	strb	r3, [r1, #0]
 8002984:	4240      	negs	r0, r0
 8002986:	2101      	movs	r1, #1
 8002988:	4421      	add	r1, r4
 800298a:	f000 f81d 	bl	80029c8 <__utoa>
 800298e:	e7f1      	b.n	8002974 <__itoa+0x10>
 8002990:	2100      	movs	r1, #0
 8002992:	e7f9      	b.n	8002988 <__itoa+0x24>

08002994 <itoa>:
 8002994:	f7ff bfe6 	b.w	8002964 <__itoa>

08002998 <memset>:
 8002998:	4402      	add	r2, r0
 800299a:	4603      	mov	r3, r0
 800299c:	4293      	cmp	r3, r2
 800299e:	d100      	bne.n	80029a2 <memset+0xa>
 80029a0:	4770      	bx	lr
 80029a2:	f803 1b01 	strb.w	r1, [r3], #1
 80029a6:	e7f9      	b.n	800299c <memset+0x4>

080029a8 <strcat>:
 80029a8:	b510      	push	{r4, lr}
 80029aa:	4603      	mov	r3, r0
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	1c5c      	adds	r4, r3, #1
 80029b0:	b93a      	cbnz	r2, 80029c2 <strcat+0x1a>
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d1f9      	bne.n	80029b4 <strcat+0xc>
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	4623      	mov	r3, r4
 80029c4:	e7f2      	b.n	80029ac <strcat+0x4>
	...

080029c8 <__utoa>:
 80029c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <__utoa+0x78>)
 80029cc:	b08b      	sub	sp, #44	; 0x2c
 80029ce:	4605      	mov	r5, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	466e      	mov	r6, sp
 80029d4:	f103 0c20 	add.w	ip, r3, #32
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	4637      	mov	r7, r6
 80029de:	c703      	stmia	r7!, {r0, r1}
 80029e0:	3308      	adds	r3, #8
 80029e2:	4563      	cmp	r3, ip
 80029e4:	463e      	mov	r6, r7
 80029e6:	d1f7      	bne.n	80029d8 <__utoa+0x10>
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	791b      	ldrb	r3, [r3, #4]
 80029ec:	713b      	strb	r3, [r7, #4]
 80029ee:	1e93      	subs	r3, r2, #2
 80029f0:	2b22      	cmp	r3, #34	; 0x22
 80029f2:	6038      	str	r0, [r7, #0]
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	d904      	bls.n	8002a04 <__utoa+0x3c>
 80029fa:	7023      	strb	r3, [r4, #0]
 80029fc:	461c      	mov	r4, r3
 80029fe:	4620      	mov	r0, r4
 8002a00:	b00b      	add	sp, #44	; 0x2c
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a04:	1e66      	subs	r6, r4, #1
 8002a06:	fbb5 f0f2 	udiv	r0, r5, r2
 8002a0a:	af0a      	add	r7, sp, #40	; 0x28
 8002a0c:	fb02 5510 	mls	r5, r2, r0, r5
 8002a10:	443d      	add	r5, r7
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8002a18:	f806 5f01 	strb.w	r5, [r6, #1]!
 8002a1c:	4605      	mov	r5, r0
 8002a1e:	b968      	cbnz	r0, 8002a3c <__utoa+0x74>
 8002a20:	5460      	strb	r0, [r4, r1]
 8002a22:	4423      	add	r3, r4
 8002a24:	4622      	mov	r2, r4
 8002a26:	1b19      	subs	r1, r3, r4
 8002a28:	1b10      	subs	r0, r2, r4
 8002a2a:	4281      	cmp	r1, r0
 8002a2c:	dde7      	ble.n	80029fe <__utoa+0x36>
 8002a2e:	7811      	ldrb	r1, [r2, #0]
 8002a30:	7818      	ldrb	r0, [r3, #0]
 8002a32:	f802 0b01 	strb.w	r0, [r2], #1
 8002a36:	f803 1901 	strb.w	r1, [r3], #-1
 8002a3a:	e7f4      	b.n	8002a26 <__utoa+0x5e>
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	e7e2      	b.n	8002a06 <__utoa+0x3e>
 8002a40:	08002af4 	.word	0x08002af4

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr
