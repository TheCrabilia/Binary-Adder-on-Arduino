
Binary_Adder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002878  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b8c  08002b8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002b8c  08002b8c  00012b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b94  08002b94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000010  08002bac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002bac  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063f6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000120d  00000000  00000000  00026436  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  00027648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000568  00000000  00000000  00027c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014da9  00000000  00000000  000281b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005260  00000000  00000000  0003cf59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008335d  00000000  00000000  000421b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001848  00000000  00000000  000c5594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080029f4 	.word	0x080029f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080029f4 	.word	0x080029f4

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fe69 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f863 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8f5 	bl	80006e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f8c9 	bl	8000690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int firstNumber = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  int secondNumber = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  int total = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  fillArray(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 f9a6 	bl	800085c <fillArray>
	  fillArray(2);
 8000510:	2002      	movs	r0, #2
 8000512:	f000 f9a3 	bl	800085c <fillArray>

	  firstNumber = (dataArray[0]*32) + (dataArray[1]*16) + (dataArray[2]*8) + (dataArray[3]*4) + (dataArray[4]*2) + (dataArray[5]*1);
 8000516:	4b25      	ldr	r3, [pc, #148]	; (80005ac <main+0xc4>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	005a      	lsls	r2, r3, #1
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <main+0xc4>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4413      	add	r3, r2
 8000522:	005a      	lsls	r2, r3, #1
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <main+0xc4>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	4413      	add	r3, r2
 800052a:	005a      	lsls	r2, r3, #1
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <main+0xc4>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	4413      	add	r3, r2
 8000532:	005a      	lsls	r2, r3, #1
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <main+0xc4>)
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	4413      	add	r3, r2
 800053a:	005a      	lsls	r2, r3, #1
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <main+0xc4>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	4413      	add	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
	  secondNumber = (dataArray[6]*32) + (dataArray[7]*16) + (dataArray[8]*8) + (dataArray[9]*4) + (dataArray[10]*2) + (dataArray[11]*1);
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <main+0xc4>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	005a      	lsls	r2, r3, #1
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <main+0xc4>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4413      	add	r3, r2
 8000550:	005a      	lsls	r2, r3, #1
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0xc4>)
 8000554:	6a1b      	ldr	r3, [r3, #32]
 8000556:	4413      	add	r3, r2
 8000558:	005a      	lsls	r2, r3, #1
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <main+0xc4>)
 800055c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055e:	4413      	add	r3, r2
 8000560:	005a      	lsls	r2, r3, #1
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <main+0xc4>)
 8000564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000566:	4413      	add	r3, r2
 8000568:	005a      	lsls	r2, r3, #1
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <main+0xc4>)
 800056c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056e:	4413      	add	r3, r2
 8000570:	60bb      	str	r3, [r7, #8]
	  total = firstNumber + secondNumber;
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	4413      	add	r3, r2
 8000578:	607b      	str	r3, [r7, #4]

	  processData(total);
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f9f4 	bl	8000968 <processData>

	  HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <main+0xc8>)
 8000588:	f001 f95c 	bl	8001844 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0xcc>)
 8000592:	f001 f957 	bl	8001844 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <main+0xd0>)
 800059c:	f001 f952 	bl	8001844 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <main+0xc8>)
 80005a6:	f001 f94d 	bl	8001844 <HAL_GPIO_WritePin>
	  fillArray(1);
 80005aa:	e7ae      	b.n	800050a <main+0x22>
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020400 	.word	0x40020400

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f9bc 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xd0>)
 800060a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f93b 	bl	80018c0 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 fc9c 	bl	8000f8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fb96 	bl	8001da0 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 fc87 	bl	8000f8c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f001 fd36 	bl	8002138 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 fc5b 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <MX_GPIO_Init+0x164>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a51      	ldr	r2, [pc, #324]	; (8000848 <MX_GPIO_Init+0x164>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <MX_GPIO_Init+0x164>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <MX_GPIO_Init+0x164>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4a      	ldr	r2, [pc, #296]	; (8000848 <MX_GPIO_Init+0x164>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <MX_GPIO_Init+0x164>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <MX_GPIO_Init+0x164>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a43      	ldr	r2, [pc, #268]	; (8000848 <MX_GPIO_Init+0x164>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <MX_GPIO_Init+0x164>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <MX_GPIO_Init+0x164>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <MX_GPIO_Init+0x164>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <MX_GPIO_Init+0x164>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, modeLed_Pin|led1_Pin|led8_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000770:	4836      	ldr	r0, [pc, #216]	; (800084c <MX_GPIO_Init+0x168>)
 8000772:	f001 f867 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	4835      	ldr	r0, [pc, #212]	; (8000850 <MX_GPIO_Init+0x16c>)
 800077c:	f001 f862 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2140      	movs	r1, #64	; 0x40
 8000784:	4833      	ldr	r0, [pc, #204]	; (8000854 <MX_GPIO_Init+0x170>)
 8000786:	f001 f85d 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : modeBtn_Pin */
  GPIO_InitStruct.Pin = modeBtn_Pin;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	4b31      	ldr	r3, [pc, #196]	; (8000858 <MX_GPIO_Init+0x174>)
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(modeBtn_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	482c      	ldr	r0, [pc, #176]	; (8000850 <MX_GPIO_Init+0x16c>)
 80007a0:	f000 feb6 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : modeLed_Pin led1_Pin led8_Pin */
  GPIO_InitStruct.Pin = modeLed_Pin|led1_Pin|led8_Pin;
 80007a4:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4823      	ldr	r0, [pc, #140]	; (800084c <MX_GPIO_Init+0x168>)
 80007be:	f000 fea7 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : n0d1_Pin n1d1_Pin n0d2_Pin n1d0_Pin */
  GPIO_InitStruct.Pin = n0d1_Pin|n1d1_Pin|n0d2_Pin|n1d0_Pin;
 80007c2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	481f      	ldr	r0, [pc, #124]	; (8000854 <MX_GPIO_Init+0x170>)
 80007d8:	f000 fe9a 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : led4_Pin */
  GPIO_InitStruct.Pin = led4_Pin;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led4_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <MX_GPIO_Init+0x16c>)
 80007f4:	f000 fe8c 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : n0d0_Pin n1d2_Pin */
  GPIO_InitStruct.Pin = n0d0_Pin|n1d2_Pin;
 80007f8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480f      	ldr	r0, [pc, #60]	; (800084c <MX_GPIO_Init+0x168>)
 800080e:	f000 fe7f 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <MX_GPIO_Init+0x170>)
 800082a:	f000 fe71 	bl	8001510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2028      	movs	r0, #40	; 0x28
 8000834:	f000 fe35 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f000 fe4e 	bl	80014da <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000
 8000850:	40020800 	.word	0x40020800
 8000854:	40020400 	.word	0x40020400
 8000858:	10110000 	.word	0x10110000

0800085c <fillArray>:

/* USER CODE BEGIN 4 */

void fillArray(int pointer) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	extern int dataArray[];
	// Do while blue button is not pressed
	while (run == 1) {
 8000864:	e06c      	b.n	8000940 <fillArray+0xe4>
		if (pointer == 1) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d133      	bne.n	80008d4 <fillArray+0x78>
			// Read all input pins for first number
			dataArray[0] = HAL_GPIO_ReadPin(n1d2_GPIO_Port, n1d2_Pin);
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	4839      	ldr	r0, [pc, #228]	; (8000958 <fillArray+0xfc>)
 8000872:	f000 ffcf 	bl	8001814 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b38      	ldr	r3, [pc, #224]	; (800095c <fillArray+0x100>)
 800087c:	601a      	str	r2, [r3, #0]
			dataArray[1] = HAL_GPIO_ReadPin(n1d1_GPIO_Port, n1d1_Pin);
 800087e:	2108      	movs	r1, #8
 8000880:	4837      	ldr	r0, [pc, #220]	; (8000960 <fillArray+0x104>)
 8000882:	f000 ffc7 	bl	8001814 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <fillArray+0x100>)
 800088c:	605a      	str	r2, [r3, #4]
			dataArray[2] = HAL_GPIO_ReadPin(n1d0_GPIO_Port, n1d0_Pin);
 800088e:	2120      	movs	r1, #32
 8000890:	4833      	ldr	r0, [pc, #204]	; (8000960 <fillArray+0x104>)
 8000892:	f000 ffbf 	bl	8001814 <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <fillArray+0x100>)
 800089c:	609a      	str	r2, [r3, #8]
			dataArray[3] = HAL_GPIO_ReadPin(n0d2_GPIO_Port, n0d2_Pin);
 800089e:	2110      	movs	r1, #16
 80008a0:	482f      	ldr	r0, [pc, #188]	; (8000960 <fillArray+0x104>)
 80008a2:	f000 ffb7 	bl	8001814 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <fillArray+0x100>)
 80008ac:	60da      	str	r2, [r3, #12]
			dataArray[4] = HAL_GPIO_ReadPin(n0d1_GPIO_Port, n0d1_Pin);
 80008ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b2:	482b      	ldr	r0, [pc, #172]	; (8000960 <fillArray+0x104>)
 80008b4:	f000 ffae 	bl	8001814 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <fillArray+0x100>)
 80008be:	611a      	str	r2, [r3, #16]
			dataArray[5] = HAL_GPIO_ReadPin(n0d0_GPIO_Port, n0d0_Pin);
 80008c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c4:	4824      	ldr	r0, [pc, #144]	; (8000958 <fillArray+0xfc>)
 80008c6:	f000 ffa5 	bl	8001814 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <fillArray+0x100>)
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	e035      	b.n	8000940 <fillArray+0xe4>
		}
		else if (pointer == 2) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d132      	bne.n	8000940 <fillArray+0xe4>
			// Read all input pins for second number
			dataArray[6] = HAL_GPIO_ReadPin(n1d2_GPIO_Port, n1d2_Pin);
 80008da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008de:	481e      	ldr	r0, [pc, #120]	; (8000958 <fillArray+0xfc>)
 80008e0:	f000 ff98 	bl	8001814 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <fillArray+0x100>)
 80008ea:	619a      	str	r2, [r3, #24]
			dataArray[7] = HAL_GPIO_ReadPin(n1d1_GPIO_Port, n1d1_Pin);
 80008ec:	2108      	movs	r1, #8
 80008ee:	481c      	ldr	r0, [pc, #112]	; (8000960 <fillArray+0x104>)
 80008f0:	f000 ff90 	bl	8001814 <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <fillArray+0x100>)
 80008fa:	61da      	str	r2, [r3, #28]
			dataArray[8] = HAL_GPIO_ReadPin(n1d0_GPIO_Port, n1d0_Pin);
 80008fc:	2120      	movs	r1, #32
 80008fe:	4818      	ldr	r0, [pc, #96]	; (8000960 <fillArray+0x104>)
 8000900:	f000 ff88 	bl	8001814 <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <fillArray+0x100>)
 800090a:	621a      	str	r2, [r3, #32]
			dataArray[9] = HAL_GPIO_ReadPin(n0d2_GPIO_Port, n0d2_Pin);
 800090c:	2110      	movs	r1, #16
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <fillArray+0x104>)
 8000910:	f000 ff80 	bl	8001814 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <fillArray+0x100>)
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
			dataArray[10] = HAL_GPIO_ReadPin(n0d1_GPIO_Port, n0d1_Pin);
 800091c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000920:	480f      	ldr	r0, [pc, #60]	; (8000960 <fillArray+0x104>)
 8000922:	f000 ff77 	bl	8001814 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <fillArray+0x100>)
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
			dataArray[11] = HAL_GPIO_ReadPin(n0d0_GPIO_Port, n0d0_Pin);
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	4809      	ldr	r0, [pc, #36]	; (8000958 <fillArray+0xfc>)
 8000934:	f000 ff6e 	bl	8001814 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <fillArray+0x100>)
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (run == 1) {
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <fillArray+0x108>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d08e      	beq.n	8000866 <fillArray+0xa>
		}
	}
	run = 1;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <fillArray+0x108>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40020000 	.word	0x40020000
 800095c:	2000002c 	.word	0x2000002c
 8000960:	40020400 	.word	0x40020400
 8000964:	20000000 	.word	0x20000000

08000968 <processData>:

void processData(int data) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	static int endPos;
	static char partOne[4] = {};
	static char partTwo[4] = {};
	char tmp[1];
	// Converting decimal number to binary
	for (int i=0; data > 0; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e012      	b.n	800099c <processData+0x34>
		outputArray[i] = data % 2;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	bfb8      	it	lt
 8000980:	425b      	neglt	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	4932      	ldr	r1, [pc, #200]	; (8000a50 <processData+0xe8>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		data = data / 2;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	0fda      	lsrs	r2, r3, #31
 8000990:	4413      	add	r3, r2
 8000992:	105b      	asrs	r3, r3, #1
 8000994:	607b      	str	r3, [r7, #4]
	for (int i=0; data > 0; i++) {
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dce9      	bgt.n	8000976 <processData+0xe>
	}

	// Process first binary number part
	startPos = 7;
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <processData+0xec>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
	endPos = 4;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <processData+0xf0>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	601a      	str	r2, [r3, #0]
	for (; startPos >= endPos; startPos--) {
 80009ae:	e014      	b.n	80009da <processData+0x72>
		strcat(partOne, itoa(outputArray[startPos], tmp, 10));
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <processData+0xec>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <processData+0xe8>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	f107 0108 	add.w	r1, r7, #8
 80009be:	220a      	movs	r2, #10
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 ffbf 	bl	8002944 <itoa>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4619      	mov	r1, r3
 80009ca:	4824      	ldr	r0, [pc, #144]	; (8000a5c <processData+0xf4>)
 80009cc:	f001 ffc4 	bl	8002958 <strcat>
	for (; startPos >= endPos; startPos--) {
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <processData+0xec>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <processData+0xec>)
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <processData+0xec>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <processData+0xf0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dae4      	bge.n	80009b0 <processData+0x48>
	}

	// Process second binary number part
	startPos = 3;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <processData+0xec>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	601a      	str	r2, [r3, #0]
	endPos = 0;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <processData+0xf0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
	for (; startPos >= endPos; startPos--) {
 80009f2:	e014      	b.n	8000a1e <processData+0xb6>
		strcat(partTwo, itoa(outputArray[startPos], tmp, 10));
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <processData+0xec>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <processData+0xe8>)
 80009fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fe:	f107 0108 	add.w	r1, r7, #8
 8000a02:	220a      	movs	r2, #10
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 ff9d 	bl	8002944 <itoa>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <processData+0xf8>)
 8000a10:	f001 ffa2 	bl	8002958 <strcat>
	for (; startPos >= endPos; startPos--) {
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <processData+0xec>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <processData+0xec>)
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <processData+0xec>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <processData+0xf0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dae4      	bge.n	80009f4 <processData+0x8c>
	}

	writeData(partOne);
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <processData+0xf4>)
 8000a2c:	f000 f81a 	bl	8000a64 <writeData>
	HAL_Delay(2000);
 8000a30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a34:	f000 fc38 	bl	80012a8 <HAL_Delay>
	writeData(partTwo);
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <processData+0xf8>)
 8000a3a:	f000 f813 	bl	8000a64 <writeData>
	HAL_Delay(3000);
 8000a3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a42:	f000 fc31 	bl	80012a8 <HAL_Delay>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000005c 	.word	0x2000005c
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	20000084 	.word	0x20000084
 8000a60:	20000088 	.word	0x20000088

08000a64 <writeData>:

void writeData(char data[4]) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if (strcmp(data, "0000") == 0 || strcmp(data, "00000000") == 0) {
 8000a6c:	49b3      	ldr	r1, [pc, #716]	; (8000d3c <writeData+0x2d8>)
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fbb0 	bl	80001d4 <strcmp>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <writeData+0x24>
 8000a7a:	49b1      	ldr	r1, [pc, #708]	; (8000d40 <writeData+0x2dc>)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fba9 	bl	80001d4 <strcmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d115      	bne.n	8000ab4 <writeData+0x50>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	48ad      	ldr	r0, [pc, #692]	; (8000d44 <writeData+0x2e0>)
 8000a90:	f000 fed8 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	48ab      	ldr	r0, [pc, #684]	; (8000d48 <writeData+0x2e4>)
 8000a9a:	f000 fed3 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	48aa      	ldr	r0, [pc, #680]	; (8000d4c <writeData+0x2e8>)
 8000aa4:	f000 fece 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	48a5      	ldr	r0, [pc, #660]	; (8000d44 <writeData+0x2e0>)
 8000aae:	f000 fec9 	bl	8001844 <HAL_GPIO_WritePin>
 8000ab2:	e249      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "0001") == 0 || strcmp(data, "00010000") == 0) {
 8000ab4:	49a6      	ldr	r1, [pc, #664]	; (8000d50 <writeData+0x2ec>)
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fb8c 	bl	80001d4 <strcmp>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <writeData+0x6c>
 8000ac2:	49a4      	ldr	r1, [pc, #656]	; (8000d54 <writeData+0x2f0>)
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fb85 	bl	80001d4 <strcmp>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d115      	bne.n	8000afc <writeData+0x98>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad6:	489b      	ldr	r0, [pc, #620]	; (8000d44 <writeData+0x2e0>)
 8000ad8:	f000 feb4 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	4899      	ldr	r0, [pc, #612]	; (8000d48 <writeData+0x2e4>)
 8000ae2:	f000 feaf 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4898      	ldr	r0, [pc, #608]	; (8000d4c <writeData+0x2e8>)
 8000aec:	f000 feaa 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	4893      	ldr	r0, [pc, #588]	; (8000d44 <writeData+0x2e0>)
 8000af6:	f000 fea5 	bl	8001844 <HAL_GPIO_WritePin>
 8000afa:	e225      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "0010") == 0 || strcmp(data, "00100000") == 0) {
 8000afc:	4996      	ldr	r1, [pc, #600]	; (8000d58 <writeData+0x2f4>)
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fb68 	bl	80001d4 <strcmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <writeData+0xb4>
 8000b0a:	4994      	ldr	r1, [pc, #592]	; (8000d5c <writeData+0x2f8>)
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fb61 	bl	80001d4 <strcmp>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d115      	bne.n	8000b44 <writeData+0xe0>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	4889      	ldr	r0, [pc, #548]	; (8000d44 <writeData+0x2e0>)
 8000b20:	f000 fe90 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	4887      	ldr	r0, [pc, #540]	; (8000d48 <writeData+0x2e4>)
 8000b2a:	f000 fe8b 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2140      	movs	r1, #64	; 0x40
 8000b32:	4886      	ldr	r0, [pc, #536]	; (8000d4c <writeData+0x2e8>)
 8000b34:	f000 fe86 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4881      	ldr	r0, [pc, #516]	; (8000d44 <writeData+0x2e0>)
 8000b3e:	f000 fe81 	bl	8001844 <HAL_GPIO_WritePin>
 8000b42:	e201      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "0011") == 0 || strcmp(data, "00110000") == 0) {
 8000b44:	4986      	ldr	r1, [pc, #536]	; (8000d60 <writeData+0x2fc>)
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fb44 	bl	80001d4 <strcmp>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <writeData+0xfc>
 8000b52:	4984      	ldr	r1, [pc, #528]	; (8000d64 <writeData+0x300>)
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fb3d 	bl	80001d4 <strcmp>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d115      	bne.n	8000b8c <writeData+0x128>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b66:	4877      	ldr	r0, [pc, #476]	; (8000d44 <writeData+0x2e0>)
 8000b68:	f000 fe6c 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4875      	ldr	r0, [pc, #468]	; (8000d48 <writeData+0x2e4>)
 8000b72:	f000 fe67 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	4874      	ldr	r0, [pc, #464]	; (8000d4c <writeData+0x2e8>)
 8000b7c:	f000 fe62 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	486f      	ldr	r0, [pc, #444]	; (8000d44 <writeData+0x2e0>)
 8000b86:	f000 fe5d 	bl	8001844 <HAL_GPIO_WritePin>
 8000b8a:	e1dd      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "0100") == 0 || strcmp(data, "01000000") == 0) {
 8000b8c:	4976      	ldr	r1, [pc, #472]	; (8000d68 <writeData+0x304>)
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fb20 	bl	80001d4 <strcmp>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <writeData+0x144>
 8000b9a:	4974      	ldr	r1, [pc, #464]	; (8000d6c <writeData+0x308>)
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fb19 	bl	80001d4 <strcmp>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d115      	bne.n	8000bd4 <writeData+0x170>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	4865      	ldr	r0, [pc, #404]	; (8000d44 <writeData+0x2e0>)
 8000bb0:	f000 fe48 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	4863      	ldr	r0, [pc, #396]	; (8000d48 <writeData+0x2e4>)
 8000bba:	f000 fe43 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	4862      	ldr	r0, [pc, #392]	; (8000d4c <writeData+0x2e8>)
 8000bc4:	f000 fe3e 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	485d      	ldr	r0, [pc, #372]	; (8000d44 <writeData+0x2e0>)
 8000bce:	f000 fe39 	bl	8001844 <HAL_GPIO_WritePin>
 8000bd2:	e1b9      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "0101") == 0 || strcmp(data, "01010000") == 0) {
 8000bd4:	4966      	ldr	r1, [pc, #408]	; (8000d70 <writeData+0x30c>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fafc 	bl	80001d4 <strcmp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <writeData+0x18c>
 8000be2:	4964      	ldr	r1, [pc, #400]	; (8000d74 <writeData+0x310>)
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff faf5 	bl	80001d4 <strcmp>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d115      	bne.n	8000c1c <writeData+0x1b8>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf6:	4853      	ldr	r0, [pc, #332]	; (8000d44 <writeData+0x2e0>)
 8000bf8:	f000 fe24 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	4851      	ldr	r0, [pc, #324]	; (8000d48 <writeData+0x2e4>)
 8000c02:	f000 fe1f 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2140      	movs	r1, #64	; 0x40
 8000c0a:	4850      	ldr	r0, [pc, #320]	; (8000d4c <writeData+0x2e8>)
 8000c0c:	f000 fe1a 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	484b      	ldr	r0, [pc, #300]	; (8000d44 <writeData+0x2e0>)
 8000c16:	f000 fe15 	bl	8001844 <HAL_GPIO_WritePin>
 8000c1a:	e195      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "0110") == 0 || strcmp(data, "01100000") == 0) {
 8000c1c:	4956      	ldr	r1, [pc, #344]	; (8000d78 <writeData+0x314>)
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fad8 	bl	80001d4 <strcmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <writeData+0x1d4>
 8000c2a:	4954      	ldr	r1, [pc, #336]	; (8000d7c <writeData+0x318>)
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad1 	bl	80001d4 <strcmp>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d115      	bne.n	8000c64 <writeData+0x200>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3e:	4841      	ldr	r0, [pc, #260]	; (8000d44 <writeData+0x2e0>)
 8000c40:	f000 fe00 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	483f      	ldr	r0, [pc, #252]	; (8000d48 <writeData+0x2e4>)
 8000c4a:	f000 fdfb 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	483e      	ldr	r0, [pc, #248]	; (8000d4c <writeData+0x2e8>)
 8000c54:	f000 fdf6 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	4839      	ldr	r0, [pc, #228]	; (8000d44 <writeData+0x2e0>)
 8000c5e:	f000 fdf1 	bl	8001844 <HAL_GPIO_WritePin>
 8000c62:	e171      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "0111") == 0 || strcmp(data, "01110000") == 0) {
 8000c64:	4946      	ldr	r1, [pc, #280]	; (8000d80 <writeData+0x31c>)
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fab4 	bl	80001d4 <strcmp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <writeData+0x21c>
 8000c72:	4944      	ldr	r1, [pc, #272]	; (8000d84 <writeData+0x320>)
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff faad 	bl	80001d4 <strcmp>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d115      	bne.n	8000cac <writeData+0x248>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c86:	482f      	ldr	r0, [pc, #188]	; (8000d44 <writeData+0x2e0>)
 8000c88:	f000 fddc 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	482d      	ldr	r0, [pc, #180]	; (8000d48 <writeData+0x2e4>)
 8000c92:	f000 fdd7 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	482c      	ldr	r0, [pc, #176]	; (8000d4c <writeData+0x2e8>)
 8000c9c:	f000 fdd2 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	4827      	ldr	r0, [pc, #156]	; (8000d44 <writeData+0x2e0>)
 8000ca6:	f000 fdcd 	bl	8001844 <HAL_GPIO_WritePin>
 8000caa:	e14d      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "1000") == 0 || strcmp(data, "10000000") == 0) {
 8000cac:	4936      	ldr	r1, [pc, #216]	; (8000d88 <writeData+0x324>)
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fa90 	bl	80001d4 <strcmp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <writeData+0x264>
 8000cba:	4934      	ldr	r1, [pc, #208]	; (8000d8c <writeData+0x328>)
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fa89 	bl	80001d4 <strcmp>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d115      	bne.n	8000cf4 <writeData+0x290>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <writeData+0x2e0>)
 8000cd0:	f000 fdb8 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	481b      	ldr	r0, [pc, #108]	; (8000d48 <writeData+0x2e4>)
 8000cda:	f000 fdb3 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2140      	movs	r1, #64	; 0x40
 8000ce2:	481a      	ldr	r0, [pc, #104]	; (8000d4c <writeData+0x2e8>)
 8000ce4:	f000 fdae 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	4815      	ldr	r0, [pc, #84]	; (8000d44 <writeData+0x2e0>)
 8000cee:	f000 fda9 	bl	8001844 <HAL_GPIO_WritePin>
 8000cf2:	e129      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "1001") == 0 || strcmp(data, "10010000") == 0) {
 8000cf4:	4926      	ldr	r1, [pc, #152]	; (8000d90 <writeData+0x32c>)
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fa6c 	bl	80001d4 <strcmp>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <writeData+0x2ac>
 8000d02:	4924      	ldr	r1, [pc, #144]	; (8000d94 <writeData+0x330>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fa65 	bl	80001d4 <strcmp>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d143      	bne.n	8000d98 <writeData+0x334>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <writeData+0x2e0>)
 8000d18:	f000 fd94 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <writeData+0x2e4>)
 8000d22:	f000 fd8f 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2140      	movs	r1, #64	; 0x40
 8000d2a:	4808      	ldr	r0, [pc, #32]	; (8000d4c <writeData+0x2e8>)
 8000d2c:	f000 fd8a 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <writeData+0x2e0>)
 8000d36:	f000 fd85 	bl	8001844 <HAL_GPIO_WritePin>
 8000d3a:	e105      	b.n	8000f48 <writeData+0x4e4>
 8000d3c:	08002a0c 	.word	0x08002a0c
 8000d40:	08002a14 	.word	0x08002a14
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	08002a20 	.word	0x08002a20
 8000d54:	08002a28 	.word	0x08002a28
 8000d58:	08002a34 	.word	0x08002a34
 8000d5c:	08002a3c 	.word	0x08002a3c
 8000d60:	08002a48 	.word	0x08002a48
 8000d64:	08002a50 	.word	0x08002a50
 8000d68:	08002a5c 	.word	0x08002a5c
 8000d6c:	08002a64 	.word	0x08002a64
 8000d70:	08002a70 	.word	0x08002a70
 8000d74:	08002a78 	.word	0x08002a78
 8000d78:	08002a84 	.word	0x08002a84
 8000d7c:	08002a8c 	.word	0x08002a8c
 8000d80:	08002a98 	.word	0x08002a98
 8000d84:	08002aa0 	.word	0x08002aa0
 8000d88:	08002aac 	.word	0x08002aac
 8000d8c:	08002ab4 	.word	0x08002ab4
 8000d90:	08002ac0 	.word	0x08002ac0
 8000d94:	08002ac8 	.word	0x08002ac8
	}
	else if (strcmp(data, "1010") == 0 || strcmp(data, "10100000") == 0) {
 8000d98:	496d      	ldr	r1, [pc, #436]	; (8000f50 <writeData+0x4ec>)
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fa1a 	bl	80001d4 <strcmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <writeData+0x350>
 8000da6:	496b      	ldr	r1, [pc, #428]	; (8000f54 <writeData+0x4f0>)
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fa13 	bl	80001d4 <strcmp>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d115      	bne.n	8000de0 <writeData+0x37c>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	4867      	ldr	r0, [pc, #412]	; (8000f58 <writeData+0x4f4>)
 8000dbc:	f000 fd42 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	4865      	ldr	r0, [pc, #404]	; (8000f5c <writeData+0x4f8>)
 8000dc6:	f000 fd3d 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4864      	ldr	r0, [pc, #400]	; (8000f60 <writeData+0x4fc>)
 8000dd0:	f000 fd38 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	485f      	ldr	r0, [pc, #380]	; (8000f58 <writeData+0x4f4>)
 8000dda:	f000 fd33 	bl	8001844 <HAL_GPIO_WritePin>
 8000dde:	e0b3      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "1011") == 0 || strcmp(data, "10110000") == 0) {
 8000de0:	4960      	ldr	r1, [pc, #384]	; (8000f64 <writeData+0x500>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff f9f6 	bl	80001d4 <strcmp>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <writeData+0x398>
 8000dee:	495e      	ldr	r1, [pc, #376]	; (8000f68 <writeData+0x504>)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff f9ef 	bl	80001d4 <strcmp>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d115      	bne.n	8000e28 <writeData+0x3c4>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e02:	4855      	ldr	r0, [pc, #340]	; (8000f58 <writeData+0x4f4>)
 8000e04:	f000 fd1e 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4853      	ldr	r0, [pc, #332]	; (8000f5c <writeData+0x4f8>)
 8000e0e:	f000 fd19 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	4852      	ldr	r0, [pc, #328]	; (8000f60 <writeData+0x4fc>)
 8000e18:	f000 fd14 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	484d      	ldr	r0, [pc, #308]	; (8000f58 <writeData+0x4f4>)
 8000e22:	f000 fd0f 	bl	8001844 <HAL_GPIO_WritePin>
 8000e26:	e08f      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "1100") == 0 || strcmp(data, "11000000") == 0) {
 8000e28:	4950      	ldr	r1, [pc, #320]	; (8000f6c <writeData+0x508>)
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff f9d2 	bl	80001d4 <strcmp>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <writeData+0x3e0>
 8000e36:	494e      	ldr	r1, [pc, #312]	; (8000f70 <writeData+0x50c>)
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff f9cb 	bl	80001d4 <strcmp>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d115      	bne.n	8000e70 <writeData+0x40c>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4a:	4843      	ldr	r0, [pc, #268]	; (8000f58 <writeData+0x4f4>)
 8000e4c:	f000 fcfa 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	4841      	ldr	r0, [pc, #260]	; (8000f5c <writeData+0x4f8>)
 8000e56:	f000 fcf5 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	4840      	ldr	r0, [pc, #256]	; (8000f60 <writeData+0x4fc>)
 8000e60:	f000 fcf0 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	483b      	ldr	r0, [pc, #236]	; (8000f58 <writeData+0x4f4>)
 8000e6a:	f000 fceb 	bl	8001844 <HAL_GPIO_WritePin>
 8000e6e:	e06b      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "1101") == 0 || strcmp(data, "11010000") == 0) {
 8000e70:	4940      	ldr	r1, [pc, #256]	; (8000f74 <writeData+0x510>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9ae 	bl	80001d4 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <writeData+0x428>
 8000e7e:	493e      	ldr	r1, [pc, #248]	; (8000f78 <writeData+0x514>)
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff f9a7 	bl	80001d4 <strcmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d115      	bne.n	8000eb8 <writeData+0x454>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e92:	4831      	ldr	r0, [pc, #196]	; (8000f58 <writeData+0x4f4>)
 8000e94:	f000 fcd6 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	482f      	ldr	r0, [pc, #188]	; (8000f5c <writeData+0x4f8>)
 8000e9e:	f000 fcd1 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2140      	movs	r1, #64	; 0x40
 8000ea6:	482e      	ldr	r0, [pc, #184]	; (8000f60 <writeData+0x4fc>)
 8000ea8:	f000 fccc 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	4829      	ldr	r0, [pc, #164]	; (8000f58 <writeData+0x4f4>)
 8000eb2:	f000 fcc7 	bl	8001844 <HAL_GPIO_WritePin>
 8000eb6:	e047      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "1110") == 0 || strcmp(data, "11100000") == 0) {
 8000eb8:	4930      	ldr	r1, [pc, #192]	; (8000f7c <writeData+0x518>)
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff f98a 	bl	80001d4 <strcmp>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <writeData+0x470>
 8000ec6:	492e      	ldr	r1, [pc, #184]	; (8000f80 <writeData+0x51c>)
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff f983 	bl	80001d4 <strcmp>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d115      	bne.n	8000f00 <writeData+0x49c>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	481f      	ldr	r0, [pc, #124]	; (8000f58 <writeData+0x4f4>)
 8000edc:	f000 fcb2 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	481d      	ldr	r0, [pc, #116]	; (8000f5c <writeData+0x4f8>)
 8000ee6:	f000 fcad 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	481c      	ldr	r0, [pc, #112]	; (8000f60 <writeData+0x4fc>)
 8000ef0:	f000 fca8 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	4817      	ldr	r0, [pc, #92]	; (8000f58 <writeData+0x4f4>)
 8000efa:	f000 fca3 	bl	8001844 <HAL_GPIO_WritePin>
 8000efe:	e023      	b.n	8000f48 <writeData+0x4e4>
	}
	else if (strcmp(data, "1111") == 0 || strcmp(data, "11110000") == 0) {
 8000f00:	4920      	ldr	r1, [pc, #128]	; (8000f84 <writeData+0x520>)
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff f966 	bl	80001d4 <strcmp>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <writeData+0x4b8>
 8000f0e:	491e      	ldr	r1, [pc, #120]	; (8000f88 <writeData+0x524>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff f95f 	bl	80001d4 <strcmp>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d115      	bne.n	8000f48 <writeData+0x4e4>
		HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <writeData+0x4f4>)
 8000f24:	f000 fc8e 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <writeData+0x4f8>)
 8000f2e:	f000 fc89 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	480a      	ldr	r0, [pc, #40]	; (8000f60 <writeData+0x4fc>)
 8000f38:	f000 fc84 	bl	8001844 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <writeData+0x4f4>)
 8000f42:	f000 fc7f 	bl	8001844 <HAL_GPIO_WritePin>
	}
}
 8000f46:	e7ff      	b.n	8000f48 <writeData+0x4e4>
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08002ad4 	.word	0x08002ad4
 8000f54:	08002adc 	.word	0x08002adc
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	08002ae8 	.word	0x08002ae8
 8000f68:	08002af0 	.word	0x08002af0
 8000f6c:	08002afc 	.word	0x08002afc
 8000f70:	08002b04 	.word	0x08002b04
 8000f74:	08002b10 	.word	0x08002b10
 8000f78:	08002b18 	.word	0x08002b18
 8000f7c:	08002b24 	.word	0x08002b24
 8000f80:	08002b2c 	.word	0x08002b2c
 8000f84:	08002b38 	.word	0x08002b38
 8000f88:	08002b40 	.word	0x08002b40

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_MspInit+0x5c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <HAL_MspInit+0x5c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_MspInit+0x5c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_MspInit+0x5c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_MspInit+0x5c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_MspInit+0x5c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fa56 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2005      	movs	r0, #5
 8000fe6:	f000 fa5c 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000fea:	2005      	movs	r0, #5
 8000fec:	f000 fa75 	bl	80014da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x84>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12b      	bne.n	8001076 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_UART_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_UART_MspInit+0x88>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_UART_MspInit+0x88>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_UART_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_UART_MspInit+0x88>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_UART_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001056:	230c      	movs	r3, #12
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001066:	2307      	movs	r3, #7
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <HAL_UART_MspInit+0x8c>)
 8001072:	f000 fa4d 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40004400 	.word	0x40004400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f8c2 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	for(int i = 0; i < 65535; i++);
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	e002      	b.n	800110a <EXTI15_10_IRQHandler+0x12>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3301      	adds	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001110:	4293      	cmp	r3, r2
 8001112:	ddf7      	ble.n	8001104 <EXTI15_10_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001114:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <EXTI15_10_IRQHandler+0x44>)
 800111a:	f000 fb7b 	bl	8001814 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <EXTI15_10_IRQHandler+0x32>
		run = 0;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <EXTI15_10_IRQHandler+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800112a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800112e:	f000 fba3 	bl	8001878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020800 	.word	0x40020800
 8001140:	20000000 	.word	0x20000000

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <SystemInit+0x28>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <SystemInit+0x28>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <SystemInit+0x28>)
 800115a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115e:	609a      	str	r2, [r3, #8]
#endif
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0x14>
 8001174:	2100      	movs	r1, #0
 8001176:	e003      	b.n	8001180 <LoopCopyDataInit>

08001178 <CopyDataInit>:
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <LoopFillZerobss+0x18>)
 800117a:	585b      	ldr	r3, [r3, r1]
 800117c:	5043      	str	r3, [r0, r1]
 800117e:	3104      	adds	r1, #4

08001180 <LoopCopyDataInit>:
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <LoopFillZerobss+0x1c>)
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <LoopFillZerobss+0x20>)
 8001184:	1842      	adds	r2, r0, r1
 8001186:	429a      	cmp	r2, r3
 8001188:	d3f6      	bcc.n	8001178 <CopyDataInit>
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopFillZerobss+0x24>)
 800118c:	e002      	b.n	8001194 <LoopFillZerobss>

0800118e <FillZerobss>:
 800118e:	2300      	movs	r3, #0
 8001190:	f842 3b04 	str.w	r3, [r2], #4

08001194 <LoopFillZerobss>:
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <LoopFillZerobss+0x28>)
 8001196:	429a      	cmp	r2, r3
 8001198:	d3f9      	bcc.n	800118e <FillZerobss>
 800119a:	f7ff ffd3 	bl	8001144 <SystemInit>
 800119e:	f001 fb95 	bl	80028cc <__libc_init_array>
 80011a2:	f7ff f9a1 	bl	80004e8 <main>
 80011a6:	4770      	bx	lr
 80011a8:	20018000 	.word	0x20018000
 80011ac:	08002b9c 	.word	0x08002b9c
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000010 	.word	0x20000010
 80011b8:	20000010 	.word	0x20000010
 80011bc:	200000d0 	.word	0x200000d0

080011c0 <ADC_IRQHandler>:
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f94d 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fed0 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f965 	bl	80014f6 <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f92d 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000004 	.word	0x20000004
 8001260:	2000000c 	.word	0x2000000c
 8001264:	20000008 	.word	0x20000008

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000000c 	.word	0x2000000c
 800128c:	200000cc 	.word	0x200000cc

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200000cc 	.word	0x200000cc

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_Delay+0x40>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000000c 	.word	0x2000000c

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff29 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff3e 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff31 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa2 	bl	8001448 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e159      	b.n	80017e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8148 	bne.w	80017da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d00b      	beq.n	800156a <HAL_GPIO_Init+0x5a>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155e:	2b11      	cmp	r3, #17
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b12      	cmp	r3, #18
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0xfc>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b12      	cmp	r3, #18
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a2 	beq.w	80017da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <HAL_GPIO_Init+0x2e4>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a55      	ldr	r2, [pc, #340]	; (80017f4 <HAL_GPIO_Init+0x2e4>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_GPIO_Init+0x2e4>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a51      	ldr	r2, [pc, #324]	; (80017f8 <HAL_GPIO_Init+0x2e8>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_GPIO_Init+0x2ec>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x202>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_GPIO_Init+0x2f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x1fe>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a46      	ldr	r2, [pc, #280]	; (8001804 <HAL_GPIO_Init+0x2f4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x1fa>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a45      	ldr	r2, [pc, #276]	; (8001808 <HAL_GPIO_Init+0x2f8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x1f6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a44      	ldr	r2, [pc, #272]	; (800180c <HAL_GPIO_Init+0x2fc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x1f2>
 80016fe:	2304      	movs	r3, #4
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x204>
 8001702:	2307      	movs	r3, #7
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x204>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x204>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x204>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x204>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4934      	ldr	r1, [pc, #208]	; (80017f8 <HAL_GPIO_Init+0x2e8>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001732:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_GPIO_Init+0x300>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001756:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <HAL_GPIO_Init+0x300>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_GPIO_Init+0x300>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001780:	4a23      	ldr	r2, [pc, #140]	; (8001810 <HAL_GPIO_Init+0x300>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_GPIO_Init+0x300>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017aa:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_GPIO_Init+0x300>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_GPIO_Init+0x300>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_GPIO_Init+0x300>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f aea2 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	3724      	adds	r7, #36	; 0x24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40013c00 	.word	0x40013c00

08001814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f806 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e25b      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d075      	beq.n	80019ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018de:	4ba3      	ldr	r3, [pc, #652]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d00c      	beq.n	8001904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	4ba0      	ldr	r3, [pc, #640]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d112      	bne.n	800191c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b9d      	ldr	r3, [pc, #628]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001902:	d10b      	bne.n	800191c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4b99      	ldr	r3, [pc, #612]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d05b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x108>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d157      	bne.n	80019c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e236      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x74>
 8001926:	4b91      	ldr	r3, [pc, #580]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a90      	ldr	r2, [pc, #576]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0xb0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x98>
 800193e:	4b8b      	ldr	r3, [pc, #556]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a8a      	ldr	r2, [pc, #552]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a87      	ldr	r2, [pc, #540]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xb0>
 8001958:	4b84      	ldr	r3, [pc, #528]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a83      	ldr	r2, [pc, #524]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a80      	ldr	r2, [pc, #512]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fc8a 	bl	8001290 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fc86 	bl	8001290 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1fb      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b76      	ldr	r3, [pc, #472]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xc0>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fc76 	bl	8001290 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fc72 	bl	8001290 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1e7      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	4b6c      	ldr	r3, [pc, #432]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0xe8>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e2:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d11c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ee:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d116      	bne.n	8001a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x152>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e1bb      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4952      	ldr	r1, [pc, #328]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	e03a      	b.n	8001a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <HAL_RCC_OscConfig+0x2b0>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fc2b 	bl	8001290 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fc27 	bl	8001290 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e19c      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4940      	ldr	r1, [pc, #256]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x2b0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fc0a 	bl	8001290 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fc06 	bl	8001290 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e17b      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d030      	beq.n	8001b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x2b4>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fbea 	bl	8001290 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fbe6 	bl	8001290 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e15b      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x200>
 8001ade:	e015      	b.n	8001b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x2b4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fbd3 	bl	8001290 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aee:	f7ff fbcf 	bl	8001290 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e144      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80a0 	beq.w	8001c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x2b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d121      	bne.n	8001b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_RCC_OscConfig+0x2b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_RCC_OscConfig+0x2b8>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb95 	bl	8001290 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e011      	b.n	8001b8e <HAL_RCC_OscConfig+0x2ce>
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	42470000 	.word	0x42470000
 8001b74:	42470e80 	.word	0x42470e80
 8001b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7ff fb88 	bl	8001290 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e0fd      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x4d4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a7c      	ldr	r2, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	e01c      	b.n	8001bea <HAL_RCC_OscConfig+0x32a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a76      	ldr	r2, [pc, #472]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	4b74      	ldr	r3, [pc, #464]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a73      	ldr	r2, [pc, #460]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x32a>
 8001bd2:	4b71      	ldr	r3, [pc, #452]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a70      	ldr	r2, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b6e      	ldr	r3, [pc, #440]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a6d      	ldr	r2, [pc, #436]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb4d 	bl	8001290 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fb49 	bl	8001290 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0bc      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCC_OscConfig+0x33a>
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fb37 	bl	8001290 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fb33 	bl	8001290 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0a6      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8092 	beq.w	8001d88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c64:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d05c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d141      	bne.n	8001cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <HAL_RCC_OscConfig+0x4dc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fb07 	bl	8001290 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fb03 	bl	8001290 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e078      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c98:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69da      	ldr	r2, [r3, #28]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	4933      	ldr	r1, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fadc 	bl	8001290 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff fad8 	bl	8001290 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e04d      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x41c>
 8001cfa:	e045      	b.n	8001d88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x4dc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fac5 	bl	8001290 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff fac1 	bl	8001290 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e036      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x44a>
 8001d28:	e02e      	b.n	8001d88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e029      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_RCC_OscConfig+0x4d8>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d11c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d115      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d5e:	4013      	ands	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d10d      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40007000 	.word	0x40007000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	42470060 	.word	0x42470060

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cc      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d90c      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0b8      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df4:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e0c:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	494d      	ldr	r1, [pc, #308]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d044      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d119      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e067      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4934      	ldr	r1, [pc, #208]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7ff f9fe 	bl	8001290 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7ff f9fa 	bl	8001290 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e04f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 020c 	and.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1eb      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d20c      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e032      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4916      	ldr	r1, [pc, #88]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490e      	ldr	r1, [pc, #56]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f26:	f000 f821 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f95e 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08002b4c 	.word	0x08002b4c
 8001f64:	20000004 	.word	0x20000004
 8001f68:	20000008 	.word	0x20000008

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f82:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d007      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x32>
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 808d 	bne.w	80020b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f9a:	60bb      	str	r3, [r7, #8]
       break;
 8001f9c:	e08c      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fa0:	60bb      	str	r3, [r7, #8]
      break;
 8001fa2:	e089      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fae:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d023      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fba:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	ea03 0501 	and.w	r5, r3, r1
 8001fd0:	ea04 0602 	and.w	r6, r4, r2
 8001fd4:	4a3d      	ldr	r2, [pc, #244]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fd6:	fb02 f106 	mul.w	r1, r2, r6
 8001fda:	2200      	movs	r2, #0
 8001fdc:	fb02 f205 	mul.w	r2, r2, r5
 8001fe0:	440a      	add	r2, r1
 8001fe2:	493a      	ldr	r1, [pc, #232]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fe4:	fba5 0101 	umull	r0, r1, r5, r1
 8001fe8:	1853      	adds	r3, r2, r1
 8001fea:	4619      	mov	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f04f 0400 	mov.w	r4, #0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4623      	mov	r3, r4
 8001ff6:	f7fe f8f7 	bl	80001e8 <__aeabi_uldivmod>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e049      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	f04f 0400 	mov.w	r4, #0
 800200c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	ea03 0501 	and.w	r5, r3, r1
 8002018:	ea04 0602 	and.w	r6, r4, r2
 800201c:	4629      	mov	r1, r5
 800201e:	4632      	mov	r2, r6
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	f04f 0400 	mov.w	r4, #0
 8002028:	0154      	lsls	r4, r2, #5
 800202a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800202e:	014b      	lsls	r3, r1, #5
 8002030:	4619      	mov	r1, r3
 8002032:	4622      	mov	r2, r4
 8002034:	1b49      	subs	r1, r1, r5
 8002036:	eb62 0206 	sbc.w	r2, r2, r6
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	f04f 0400 	mov.w	r4, #0
 8002042:	0194      	lsls	r4, r2, #6
 8002044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002048:	018b      	lsls	r3, r1, #6
 800204a:	1a5b      	subs	r3, r3, r1
 800204c:	eb64 0402 	sbc.w	r4, r4, r2
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	00e2      	lsls	r2, r4, #3
 800205a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800205e:	00d9      	lsls	r1, r3, #3
 8002060:	460b      	mov	r3, r1
 8002062:	4614      	mov	r4, r2
 8002064:	195b      	adds	r3, r3, r5
 8002066:	eb44 0406 	adc.w	r4, r4, r6
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	02a2      	lsls	r2, r4, #10
 8002074:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002078:	0299      	lsls	r1, r3, #10
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	4618      	mov	r0, r3
 8002080:	4621      	mov	r1, r4
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f04f 0400 	mov.w	r4, #0
 8002088:	461a      	mov	r2, r3
 800208a:	4623      	mov	r3, r4
 800208c:	f7fe f8ac 	bl	80001e8 <__aeabi_uldivmod>
 8002090:	4603      	mov	r3, r0
 8002092:	460c      	mov	r4, r1
 8002094:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	3301      	adds	r3, #1
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	60bb      	str	r3, [r7, #8]
      break;
 80020b0:	e002      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020b4:	60bb      	str	r3, [r7, #8]
      break;
 80020b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b8:	68bb      	ldr	r3, [r7, #8]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	017d7840 	.word	0x017d7840

080020d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ec:	f7ff fff0 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 80020f0:	4601      	mov	r1, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4a03      	ldr	r2, [pc, #12]	; (800210c <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	08002b5c 	.word	0x08002b5c

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002114:	f7ff ffdc 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 8002118:	4601      	mov	r1, r0
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4a03      	ldr	r2, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	fa21 f303 	lsr.w	r3, r1, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	08002b5c 	.word	0x08002b5c

08002138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e03f      	b.n	80021ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe ff4c 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2224      	movs	r2, #36	; 0x24
 8002168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800217a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f829 	bl	80021d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002216:	f023 030c 	bic.w	r3, r3, #12
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	430b      	orrs	r3, r1
 8002222:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002242:	f040 818b 	bne.w	800255c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4ac1      	ldr	r2, [pc, #772]	; (8002550 <UART_SetConfig+0x37c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d005      	beq.n	800225c <UART_SetConfig+0x88>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4abf      	ldr	r2, [pc, #764]	; (8002554 <UART_SetConfig+0x380>)
 8002256:	4293      	cmp	r3, r2
 8002258:	f040 80bd 	bne.w	80023d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800225c:	f7ff ff58 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 8002260:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	461d      	mov	r5, r3
 8002266:	f04f 0600 	mov.w	r6, #0
 800226a:	46a8      	mov	r8, r5
 800226c:	46b1      	mov	r9, r6
 800226e:	eb18 0308 	adds.w	r3, r8, r8
 8002272:	eb49 0409 	adc.w	r4, r9, r9
 8002276:	4698      	mov	r8, r3
 8002278:	46a1      	mov	r9, r4
 800227a:	eb18 0805 	adds.w	r8, r8, r5
 800227e:	eb49 0906 	adc.w	r9, r9, r6
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800228e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002292:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002296:	4688      	mov	r8, r1
 8002298:	4691      	mov	r9, r2
 800229a:	eb18 0005 	adds.w	r0, r8, r5
 800229e:	eb49 0106 	adc.w	r1, r9, r6
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	461d      	mov	r5, r3
 80022a8:	f04f 0600 	mov.w	r6, #0
 80022ac:	196b      	adds	r3, r5, r5
 80022ae:	eb46 0406 	adc.w	r4, r6, r6
 80022b2:	461a      	mov	r2, r3
 80022b4:	4623      	mov	r3, r4
 80022b6:	f7fd ff97 	bl	80001e8 <__aeabi_uldivmod>
 80022ba:	4603      	mov	r3, r0
 80022bc:	460c      	mov	r4, r1
 80022be:	461a      	mov	r2, r3
 80022c0:	4ba5      	ldr	r3, [pc, #660]	; (8002558 <UART_SetConfig+0x384>)
 80022c2:	fba3 2302 	umull	r2, r3, r3, r2
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	461d      	mov	r5, r3
 80022d0:	f04f 0600 	mov.w	r6, #0
 80022d4:	46a9      	mov	r9, r5
 80022d6:	46b2      	mov	sl, r6
 80022d8:	eb19 0309 	adds.w	r3, r9, r9
 80022dc:	eb4a 040a 	adc.w	r4, sl, sl
 80022e0:	4699      	mov	r9, r3
 80022e2:	46a2      	mov	sl, r4
 80022e4:	eb19 0905 	adds.w	r9, r9, r5
 80022e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002300:	4689      	mov	r9, r1
 8002302:	4692      	mov	sl, r2
 8002304:	eb19 0005 	adds.w	r0, r9, r5
 8002308:	eb4a 0106 	adc.w	r1, sl, r6
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	461d      	mov	r5, r3
 8002312:	f04f 0600 	mov.w	r6, #0
 8002316:	196b      	adds	r3, r5, r5
 8002318:	eb46 0406 	adc.w	r4, r6, r6
 800231c:	461a      	mov	r2, r3
 800231e:	4623      	mov	r3, r4
 8002320:	f7fd ff62 	bl	80001e8 <__aeabi_uldivmod>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	461a      	mov	r2, r3
 800232a:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <UART_SetConfig+0x384>)
 800232c:	fba3 1302 	umull	r1, r3, r3, r2
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	2164      	movs	r1, #100	; 0x64
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	3332      	adds	r3, #50	; 0x32
 800233e:	4a86      	ldr	r2, [pc, #536]	; (8002558 <UART_SetConfig+0x384>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800234c:	4498      	add	r8, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	461d      	mov	r5, r3
 8002352:	f04f 0600 	mov.w	r6, #0
 8002356:	46a9      	mov	r9, r5
 8002358:	46b2      	mov	sl, r6
 800235a:	eb19 0309 	adds.w	r3, r9, r9
 800235e:	eb4a 040a 	adc.w	r4, sl, sl
 8002362:	4699      	mov	r9, r3
 8002364:	46a2      	mov	sl, r4
 8002366:	eb19 0905 	adds.w	r9, r9, r5
 800236a:	eb4a 0a06 	adc.w	sl, sl, r6
 800236e:	f04f 0100 	mov.w	r1, #0
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800237a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800237e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002382:	4689      	mov	r9, r1
 8002384:	4692      	mov	sl, r2
 8002386:	eb19 0005 	adds.w	r0, r9, r5
 800238a:	eb4a 0106 	adc.w	r1, sl, r6
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	461d      	mov	r5, r3
 8002394:	f04f 0600 	mov.w	r6, #0
 8002398:	196b      	adds	r3, r5, r5
 800239a:	eb46 0406 	adc.w	r4, r6, r6
 800239e:	461a      	mov	r2, r3
 80023a0:	4623      	mov	r3, r4
 80023a2:	f7fd ff21 	bl	80001e8 <__aeabi_uldivmod>
 80023a6:	4603      	mov	r3, r0
 80023a8:	460c      	mov	r4, r1
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <UART_SetConfig+0x384>)
 80023ae:	fba3 1302 	umull	r1, r3, r3, r2
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2164      	movs	r1, #100	; 0x64
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	3332      	adds	r3, #50	; 0x32
 80023c0:	4a65      	ldr	r2, [pc, #404]	; (8002558 <UART_SetConfig+0x384>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	f003 0207 	and.w	r2, r3, #7
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4442      	add	r2, r8
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	e26f      	b.n	80028b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023d6:	f7ff fe87 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 80023da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	461d      	mov	r5, r3
 80023e0:	f04f 0600 	mov.w	r6, #0
 80023e4:	46a8      	mov	r8, r5
 80023e6:	46b1      	mov	r9, r6
 80023e8:	eb18 0308 	adds.w	r3, r8, r8
 80023ec:	eb49 0409 	adc.w	r4, r9, r9
 80023f0:	4698      	mov	r8, r3
 80023f2:	46a1      	mov	r9, r4
 80023f4:	eb18 0805 	adds.w	r8, r8, r5
 80023f8:	eb49 0906 	adc.w	r9, r9, r6
 80023fc:	f04f 0100 	mov.w	r1, #0
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002408:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800240c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002410:	4688      	mov	r8, r1
 8002412:	4691      	mov	r9, r2
 8002414:	eb18 0005 	adds.w	r0, r8, r5
 8002418:	eb49 0106 	adc.w	r1, r9, r6
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	461d      	mov	r5, r3
 8002422:	f04f 0600 	mov.w	r6, #0
 8002426:	196b      	adds	r3, r5, r5
 8002428:	eb46 0406 	adc.w	r4, r6, r6
 800242c:	461a      	mov	r2, r3
 800242e:	4623      	mov	r3, r4
 8002430:	f7fd feda 	bl	80001e8 <__aeabi_uldivmod>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	461a      	mov	r2, r3
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <UART_SetConfig+0x384>)
 800243c:	fba3 2302 	umull	r2, r3, r3, r2
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	461d      	mov	r5, r3
 800244a:	f04f 0600 	mov.w	r6, #0
 800244e:	46a9      	mov	r9, r5
 8002450:	46b2      	mov	sl, r6
 8002452:	eb19 0309 	adds.w	r3, r9, r9
 8002456:	eb4a 040a 	adc.w	r4, sl, sl
 800245a:	4699      	mov	r9, r3
 800245c:	46a2      	mov	sl, r4
 800245e:	eb19 0905 	adds.w	r9, r9, r5
 8002462:	eb4a 0a06 	adc.w	sl, sl, r6
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800247a:	4689      	mov	r9, r1
 800247c:	4692      	mov	sl, r2
 800247e:	eb19 0005 	adds.w	r0, r9, r5
 8002482:	eb4a 0106 	adc.w	r1, sl, r6
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	461d      	mov	r5, r3
 800248c:	f04f 0600 	mov.w	r6, #0
 8002490:	196b      	adds	r3, r5, r5
 8002492:	eb46 0406 	adc.w	r4, r6, r6
 8002496:	461a      	mov	r2, r3
 8002498:	4623      	mov	r3, r4
 800249a:	f7fd fea5 	bl	80001e8 <__aeabi_uldivmod>
 800249e:	4603      	mov	r3, r0
 80024a0:	460c      	mov	r4, r1
 80024a2:	461a      	mov	r2, r3
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <UART_SetConfig+0x384>)
 80024a6:	fba3 1302 	umull	r1, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2164      	movs	r1, #100	; 0x64
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <UART_SetConfig+0x384>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024c6:	4498      	add	r8, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	461d      	mov	r5, r3
 80024cc:	f04f 0600 	mov.w	r6, #0
 80024d0:	46a9      	mov	r9, r5
 80024d2:	46b2      	mov	sl, r6
 80024d4:	eb19 0309 	adds.w	r3, r9, r9
 80024d8:	eb4a 040a 	adc.w	r4, sl, sl
 80024dc:	4699      	mov	r9, r3
 80024de:	46a2      	mov	sl, r4
 80024e0:	eb19 0905 	adds.w	r9, r9, r5
 80024e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024fc:	4689      	mov	r9, r1
 80024fe:	4692      	mov	sl, r2
 8002500:	eb19 0005 	adds.w	r0, r9, r5
 8002504:	eb4a 0106 	adc.w	r1, sl, r6
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	461d      	mov	r5, r3
 800250e:	f04f 0600 	mov.w	r6, #0
 8002512:	196b      	adds	r3, r5, r5
 8002514:	eb46 0406 	adc.w	r4, r6, r6
 8002518:	461a      	mov	r2, r3
 800251a:	4623      	mov	r3, r4
 800251c:	f7fd fe64 	bl	80001e8 <__aeabi_uldivmod>
 8002520:	4603      	mov	r3, r0
 8002522:	460c      	mov	r4, r1
 8002524:	461a      	mov	r2, r3
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <UART_SetConfig+0x384>)
 8002528:	fba3 1302 	umull	r1, r3, r3, r2
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	2164      	movs	r1, #100	; 0x64
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	3332      	adds	r3, #50	; 0x32
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <UART_SetConfig+0x384>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	f003 0207 	and.w	r2, r3, #7
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4442      	add	r2, r8
 800254c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800254e:	e1b2      	b.n	80028b6 <UART_SetConfig+0x6e2>
 8002550:	40011000 	.word	0x40011000
 8002554:	40011400 	.word	0x40011400
 8002558:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4ad7      	ldr	r2, [pc, #860]	; (80028c0 <UART_SetConfig+0x6ec>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d005      	beq.n	8002572 <UART_SetConfig+0x39e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4ad6      	ldr	r2, [pc, #856]	; (80028c4 <UART_SetConfig+0x6f0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	f040 80d1 	bne.w	8002714 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002572:	f7ff fdcd 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 8002576:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	469a      	mov	sl, r3
 800257c:	f04f 0b00 	mov.w	fp, #0
 8002580:	46d0      	mov	r8, sl
 8002582:	46d9      	mov	r9, fp
 8002584:	eb18 0308 	adds.w	r3, r8, r8
 8002588:	eb49 0409 	adc.w	r4, r9, r9
 800258c:	4698      	mov	r8, r3
 800258e:	46a1      	mov	r9, r4
 8002590:	eb18 080a 	adds.w	r8, r8, sl
 8002594:	eb49 090b 	adc.w	r9, r9, fp
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025ac:	4688      	mov	r8, r1
 80025ae:	4691      	mov	r9, r2
 80025b0:	eb1a 0508 	adds.w	r5, sl, r8
 80025b4:	eb4b 0609 	adc.w	r6, fp, r9
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4619      	mov	r1, r3
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	f04f 0400 	mov.w	r4, #0
 80025ca:	0094      	lsls	r4, r2, #2
 80025cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025d0:	008b      	lsls	r3, r1, #2
 80025d2:	461a      	mov	r2, r3
 80025d4:	4623      	mov	r3, r4
 80025d6:	4628      	mov	r0, r5
 80025d8:	4631      	mov	r1, r6
 80025da:	f7fd fe05 	bl	80001e8 <__aeabi_uldivmod>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	461a      	mov	r2, r3
 80025e4:	4bb8      	ldr	r3, [pc, #736]	; (80028c8 <UART_SetConfig+0x6f4>)
 80025e6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	469b      	mov	fp, r3
 80025f4:	f04f 0c00 	mov.w	ip, #0
 80025f8:	46d9      	mov	r9, fp
 80025fa:	46e2      	mov	sl, ip
 80025fc:	eb19 0309 	adds.w	r3, r9, r9
 8002600:	eb4a 040a 	adc.w	r4, sl, sl
 8002604:	4699      	mov	r9, r3
 8002606:	46a2      	mov	sl, r4
 8002608:	eb19 090b 	adds.w	r9, r9, fp
 800260c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002624:	4689      	mov	r9, r1
 8002626:	4692      	mov	sl, r2
 8002628:	eb1b 0509 	adds.w	r5, fp, r9
 800262c:	eb4c 060a 	adc.w	r6, ip, sl
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f04f 0400 	mov.w	r4, #0
 8002642:	0094      	lsls	r4, r2, #2
 8002644:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002648:	008b      	lsls	r3, r1, #2
 800264a:	461a      	mov	r2, r3
 800264c:	4623      	mov	r3, r4
 800264e:	4628      	mov	r0, r5
 8002650:	4631      	mov	r1, r6
 8002652:	f7fd fdc9 	bl	80001e8 <__aeabi_uldivmod>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	461a      	mov	r2, r3
 800265c:	4b9a      	ldr	r3, [pc, #616]	; (80028c8 <UART_SetConfig+0x6f4>)
 800265e:	fba3 1302 	umull	r1, r3, r3, r2
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2164      	movs	r1, #100	; 0x64
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	3332      	adds	r3, #50	; 0x32
 8002670:	4a95      	ldr	r2, [pc, #596]	; (80028c8 <UART_SetConfig+0x6f4>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267c:	4498      	add	r8, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	469b      	mov	fp, r3
 8002682:	f04f 0c00 	mov.w	ip, #0
 8002686:	46d9      	mov	r9, fp
 8002688:	46e2      	mov	sl, ip
 800268a:	eb19 0309 	adds.w	r3, r9, r9
 800268e:	eb4a 040a 	adc.w	r4, sl, sl
 8002692:	4699      	mov	r9, r3
 8002694:	46a2      	mov	sl, r4
 8002696:	eb19 090b 	adds.w	r9, r9, fp
 800269a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026b2:	4689      	mov	r9, r1
 80026b4:	4692      	mov	sl, r2
 80026b6:	eb1b 0509 	adds.w	r5, fp, r9
 80026ba:	eb4c 060a 	adc.w	r6, ip, sl
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	f04f 0400 	mov.w	r4, #0
 80026d0:	0094      	lsls	r4, r2, #2
 80026d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026d6:	008b      	lsls	r3, r1, #2
 80026d8:	461a      	mov	r2, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	4628      	mov	r0, r5
 80026de:	4631      	mov	r1, r6
 80026e0:	f7fd fd82 	bl	80001e8 <__aeabi_uldivmod>
 80026e4:	4603      	mov	r3, r0
 80026e6:	460c      	mov	r4, r1
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <UART_SetConfig+0x6f4>)
 80026ec:	fba3 1302 	umull	r1, r3, r3, r2
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	2164      	movs	r1, #100	; 0x64
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	3332      	adds	r3, #50	; 0x32
 80026fe:	4a72      	ldr	r2, [pc, #456]	; (80028c8 <UART_SetConfig+0x6f4>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	f003 020f 	and.w	r2, r3, #15
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4442      	add	r2, r8
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	e0d0      	b.n	80028b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002714:	f7ff fce8 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8002718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	469a      	mov	sl, r3
 800271e:	f04f 0b00 	mov.w	fp, #0
 8002722:	46d0      	mov	r8, sl
 8002724:	46d9      	mov	r9, fp
 8002726:	eb18 0308 	adds.w	r3, r8, r8
 800272a:	eb49 0409 	adc.w	r4, r9, r9
 800272e:	4698      	mov	r8, r3
 8002730:	46a1      	mov	r9, r4
 8002732:	eb18 080a 	adds.w	r8, r8, sl
 8002736:	eb49 090b 	adc.w	r9, r9, fp
 800273a:	f04f 0100 	mov.w	r1, #0
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800274a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800274e:	4688      	mov	r8, r1
 8002750:	4691      	mov	r9, r2
 8002752:	eb1a 0508 	adds.w	r5, sl, r8
 8002756:	eb4b 0609 	adc.w	r6, fp, r9
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f04f 0400 	mov.w	r4, #0
 800276c:	0094      	lsls	r4, r2, #2
 800276e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002772:	008b      	lsls	r3, r1, #2
 8002774:	461a      	mov	r2, r3
 8002776:	4623      	mov	r3, r4
 8002778:	4628      	mov	r0, r5
 800277a:	4631      	mov	r1, r6
 800277c:	f7fd fd34 	bl	80001e8 <__aeabi_uldivmod>
 8002780:	4603      	mov	r3, r0
 8002782:	460c      	mov	r4, r1
 8002784:	461a      	mov	r2, r3
 8002786:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <UART_SetConfig+0x6f4>)
 8002788:	fba3 2302 	umull	r2, r3, r3, r2
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	469b      	mov	fp, r3
 8002796:	f04f 0c00 	mov.w	ip, #0
 800279a:	46d9      	mov	r9, fp
 800279c:	46e2      	mov	sl, ip
 800279e:	eb19 0309 	adds.w	r3, r9, r9
 80027a2:	eb4a 040a 	adc.w	r4, sl, sl
 80027a6:	4699      	mov	r9, r3
 80027a8:	46a2      	mov	sl, r4
 80027aa:	eb19 090b 	adds.w	r9, r9, fp
 80027ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027c6:	4689      	mov	r9, r1
 80027c8:	4692      	mov	sl, r2
 80027ca:	eb1b 0509 	adds.w	r5, fp, r9
 80027ce:	eb4c 060a 	adc.w	r6, ip, sl
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4619      	mov	r1, r3
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	f04f 0400 	mov.w	r4, #0
 80027e4:	0094      	lsls	r4, r2, #2
 80027e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ea:	008b      	lsls	r3, r1, #2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	4628      	mov	r0, r5
 80027f2:	4631      	mov	r1, r6
 80027f4:	f7fd fcf8 	bl	80001e8 <__aeabi_uldivmod>
 80027f8:	4603      	mov	r3, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <UART_SetConfig+0x6f4>)
 8002800:	fba3 1302 	umull	r1, r3, r3, r2
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	2164      	movs	r1, #100	; 0x64
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	3332      	adds	r3, #50	; 0x32
 8002812:	4a2d      	ldr	r2, [pc, #180]	; (80028c8 <UART_SetConfig+0x6f4>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281e:	4498      	add	r8, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	469b      	mov	fp, r3
 8002824:	f04f 0c00 	mov.w	ip, #0
 8002828:	46d9      	mov	r9, fp
 800282a:	46e2      	mov	sl, ip
 800282c:	eb19 0309 	adds.w	r3, r9, r9
 8002830:	eb4a 040a 	adc.w	r4, sl, sl
 8002834:	4699      	mov	r9, r3
 8002836:	46a2      	mov	sl, r4
 8002838:	eb19 090b 	adds.w	r9, r9, fp
 800283c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800284c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002850:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002854:	4689      	mov	r9, r1
 8002856:	4692      	mov	sl, r2
 8002858:	eb1b 0509 	adds.w	r5, fp, r9
 800285c:	eb4c 060a 	adc.w	r6, ip, sl
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	f04f 0400 	mov.w	r4, #0
 8002872:	0094      	lsls	r4, r2, #2
 8002874:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002878:	008b      	lsls	r3, r1, #2
 800287a:	461a      	mov	r2, r3
 800287c:	4623      	mov	r3, r4
 800287e:	4628      	mov	r0, r5
 8002880:	4631      	mov	r1, r6
 8002882:	f7fd fcb1 	bl	80001e8 <__aeabi_uldivmod>
 8002886:	4603      	mov	r3, r0
 8002888:	460c      	mov	r4, r1
 800288a:	461a      	mov	r2, r3
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <UART_SetConfig+0x6f4>)
 800288e:	fba3 1302 	umull	r1, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2164      	movs	r1, #100	; 0x64
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	3332      	adds	r3, #50	; 0x32
 80028a0:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <UART_SetConfig+0x6f4>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	f003 020f 	and.w	r2, r3, #15
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4442      	add	r2, r8
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	e7ff      	b.n	80028b6 <UART_SetConfig+0x6e2>
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	51eb851f 	.word	0x51eb851f

080028cc <__libc_init_array>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	4e0d      	ldr	r6, [pc, #52]	; (8002904 <__libc_init_array+0x38>)
 80028d0:	4c0d      	ldr	r4, [pc, #52]	; (8002908 <__libc_init_array+0x3c>)
 80028d2:	1ba4      	subs	r4, r4, r6
 80028d4:	10a4      	asrs	r4, r4, #2
 80028d6:	2500      	movs	r5, #0
 80028d8:	42a5      	cmp	r5, r4
 80028da:	d109      	bne.n	80028f0 <__libc_init_array+0x24>
 80028dc:	4e0b      	ldr	r6, [pc, #44]	; (800290c <__libc_init_array+0x40>)
 80028de:	4c0c      	ldr	r4, [pc, #48]	; (8002910 <__libc_init_array+0x44>)
 80028e0:	f000 f888 	bl	80029f4 <_init>
 80028e4:	1ba4      	subs	r4, r4, r6
 80028e6:	10a4      	asrs	r4, r4, #2
 80028e8:	2500      	movs	r5, #0
 80028ea:	42a5      	cmp	r5, r4
 80028ec:	d105      	bne.n	80028fa <__libc_init_array+0x2e>
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f4:	4798      	blx	r3
 80028f6:	3501      	adds	r5, #1
 80028f8:	e7ee      	b.n	80028d8 <__libc_init_array+0xc>
 80028fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fe:	4798      	blx	r3
 8002900:	3501      	adds	r5, #1
 8002902:	e7f2      	b.n	80028ea <__libc_init_array+0x1e>
 8002904:	08002b94 	.word	0x08002b94
 8002908:	08002b94 	.word	0x08002b94
 800290c:	08002b94 	.word	0x08002b94
 8002910:	08002b98 	.word	0x08002b98

08002914 <__itoa>:
 8002914:	1e93      	subs	r3, r2, #2
 8002916:	2b22      	cmp	r3, #34	; 0x22
 8002918:	b510      	push	{r4, lr}
 800291a:	460c      	mov	r4, r1
 800291c:	d904      	bls.n	8002928 <__itoa+0x14>
 800291e:	2300      	movs	r3, #0
 8002920:	700b      	strb	r3, [r1, #0]
 8002922:	461c      	mov	r4, r3
 8002924:	4620      	mov	r0, r4
 8002926:	bd10      	pop	{r4, pc}
 8002928:	2a0a      	cmp	r2, #10
 800292a:	d109      	bne.n	8002940 <__itoa+0x2c>
 800292c:	2800      	cmp	r0, #0
 800292e:	da07      	bge.n	8002940 <__itoa+0x2c>
 8002930:	232d      	movs	r3, #45	; 0x2d
 8002932:	700b      	strb	r3, [r1, #0]
 8002934:	4240      	negs	r0, r0
 8002936:	2101      	movs	r1, #1
 8002938:	4421      	add	r1, r4
 800293a:	f000 f81d 	bl	8002978 <__utoa>
 800293e:	e7f1      	b.n	8002924 <__itoa+0x10>
 8002940:	2100      	movs	r1, #0
 8002942:	e7f9      	b.n	8002938 <__itoa+0x24>

08002944 <itoa>:
 8002944:	f7ff bfe6 	b.w	8002914 <__itoa>

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <strcat>:
 8002958:	b510      	push	{r4, lr}
 800295a:	4603      	mov	r3, r0
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	1c5c      	adds	r4, r3, #1
 8002960:	b93a      	cbnz	r2, 8002972 <strcat+0x1a>
 8002962:	3b01      	subs	r3, #1
 8002964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002968:	f803 2f01 	strb.w	r2, [r3, #1]!
 800296c:	2a00      	cmp	r2, #0
 800296e:	d1f9      	bne.n	8002964 <strcat+0xc>
 8002970:	bd10      	pop	{r4, pc}
 8002972:	4623      	mov	r3, r4
 8002974:	e7f2      	b.n	800295c <strcat+0x4>
	...

08002978 <__utoa>:
 8002978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <__utoa+0x78>)
 800297c:	b08b      	sub	sp, #44	; 0x2c
 800297e:	4605      	mov	r5, r0
 8002980:	460c      	mov	r4, r1
 8002982:	466e      	mov	r6, sp
 8002984:	f103 0c20 	add.w	ip, r3, #32
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	4637      	mov	r7, r6
 800298e:	c703      	stmia	r7!, {r0, r1}
 8002990:	3308      	adds	r3, #8
 8002992:	4563      	cmp	r3, ip
 8002994:	463e      	mov	r6, r7
 8002996:	d1f7      	bne.n	8002988 <__utoa+0x10>
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	713b      	strb	r3, [r7, #4]
 800299e:	1e93      	subs	r3, r2, #2
 80029a0:	2b22      	cmp	r3, #34	; 0x22
 80029a2:	6038      	str	r0, [r7, #0]
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	d904      	bls.n	80029b4 <__utoa+0x3c>
 80029aa:	7023      	strb	r3, [r4, #0]
 80029ac:	461c      	mov	r4, r3
 80029ae:	4620      	mov	r0, r4
 80029b0:	b00b      	add	sp, #44	; 0x2c
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b4:	1e66      	subs	r6, r4, #1
 80029b6:	fbb5 f0f2 	udiv	r0, r5, r2
 80029ba:	af0a      	add	r7, sp, #40	; 0x28
 80029bc:	fb02 5510 	mls	r5, r2, r0, r5
 80029c0:	443d      	add	r5, r7
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80029c8:	f806 5f01 	strb.w	r5, [r6, #1]!
 80029cc:	4605      	mov	r5, r0
 80029ce:	b968      	cbnz	r0, 80029ec <__utoa+0x74>
 80029d0:	5460      	strb	r0, [r4, r1]
 80029d2:	4423      	add	r3, r4
 80029d4:	4622      	mov	r2, r4
 80029d6:	1b19      	subs	r1, r3, r4
 80029d8:	1b10      	subs	r0, r2, r4
 80029da:	4281      	cmp	r1, r0
 80029dc:	dde7      	ble.n	80029ae <__utoa+0x36>
 80029de:	7811      	ldrb	r1, [r2, #0]
 80029e0:	7818      	ldrb	r0, [r3, #0]
 80029e2:	f802 0b01 	strb.w	r0, [r2], #1
 80029e6:	f803 1901 	strb.w	r1, [r3], #-1
 80029ea:	e7f4      	b.n	80029d6 <__utoa+0x5e>
 80029ec:	460b      	mov	r3, r1
 80029ee:	e7e2      	b.n	80029b6 <__utoa+0x3e>
 80029f0:	08002b64 	.word	0x08002b64

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
